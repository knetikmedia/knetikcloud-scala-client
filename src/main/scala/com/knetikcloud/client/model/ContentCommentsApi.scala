/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.CommentResource
import com.knetikcloud.client.model.PageResourceCommentResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.StringWrapper
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class ContentCommentsApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ContentCommentsApiAsyncHelper(client, config)

  /**
   * Add a new comment
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COMMENTS_USER or COMMENTS_ADMIN
   * @param commentResource The comment to be added (optional)
   * @return CommentResource
   */
  def addComment(commentResource: Option[CommentResource] = None): Option[CommentResource] = {
    val await = Try(Await.result(addCommentAsync(commentResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add a new comment asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COMMENTS_USER or COMMENTS_ADMIN
   * @param commentResource The comment to be added (optional)
   * @return Future(CommentResource)
  */
  def addCommentAsync(commentResource: Option[CommentResource] = None): Future[CommentResource] = {
      helper.addComment(commentResource)
  }


  /**
   * Delete a comment
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COMMENTS_USER or COMMENTS_ADMIN
   * @param id The comment id 
   * @return void
   */
  def deleteComment(id: Long) = {
    val await = Try(Await.result(deleteCommentAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a comment asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COMMENTS_USER or COMMENTS_ADMIN
   * @param id The comment id 
   * @return Future(void)
  */
  def deleteCommentAsync(id: Long) = {
      helper.deleteComment(id)
  }


  /**
   * Return a comment
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param id The comment id 
   * @return CommentResource
   */
  def getComment(id: Long): Option[CommentResource] = {
    val await = Try(Await.result(getCommentAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Return a comment asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param id The comment id 
   * @return Future(CommentResource)
  */
  def getCommentAsync(id: Long): Future[CommentResource] = {
      helper.getComment(id)
  }


  /**
   * Returns a page of comments
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param context Get comments by context type 
   * @param contextId Get comments by context id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return PageResourceCommentResource
   */
  def getComments(context: String, contextId: Integer, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Option[PageResourceCommentResource] = {
    val await = Try(Await.result(getCommentsAsync(context, contextId, size, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Returns a page of comments asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param context Get comments by context type 
   * @param contextId Get comments by context id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return Future(PageResourceCommentResource)
  */
  def getCommentsAsync(context: String, contextId: Integer, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Future[PageResourceCommentResource] = {
      helper.getComments(context, contextId, size, page)
  }


  /**
   * Update a comment
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COMMENTS_USER or COMMENTS_ADMIN
   * @param id The comment id 
   * @param content The comment content (optional)
   * @return void
   */
  def updateComment(id: Long, content: Option[StringWrapper] = None) = {
    val await = Try(Await.result(updateCommentAsync(id, content), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a comment asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COMMENTS_USER or COMMENTS_ADMIN
   * @param id The comment id 
   * @param content The comment content (optional)
   * @return Future(void)
  */
  def updateCommentAsync(id: Long, content: Option[StringWrapper] = None) = {
      helper.updateComment(id, content)
  }


}

class ContentCommentsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addComment(commentResource: Option[CommentResource] = None
    )(implicit reader: ClientResponseReader[CommentResource], writer: RequestWriter[CommentResource]): Future[CommentResource] = {
    // create path and map variables
    val path = (addFmt("/comments"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(commentResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteComment(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/comments/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getComment(id: Long)(implicit reader: ClientResponseReader[CommentResource]): Future[CommentResource] = {
    // create path and map variables
    val path = (addFmt("/comments/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getComments(context: String,
    contextId: Integer,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1)
    )(implicit reader: ClientResponseReader[PageResourceCommentResource]): Future[PageResourceCommentResource] = {
    // create path and map variables
    val path = (addFmt("/comments"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (context == null) throw new Exception("Missing required parameter 'context' when calling ContentCommentsApi->getComments")

    queryParams += "context" -> context.toString
    queryParams += "context_id" -> contextId.toString
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateComment(id: Long,
    content: Option[StringWrapper] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[StringWrapper]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/comments/{id}/content")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(content))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
