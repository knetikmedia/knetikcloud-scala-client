/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.NotificationResource
import com.knetikcloud.client.model.NotificationTypeResource
import com.knetikcloud.client.model.NotificationUserTypeResource
import com.knetikcloud.client.model.PageResourceNotificationTypeResource
import com.knetikcloud.client.model.PageResourceNotificationUserTypeResource
import com.knetikcloud.client.model.PageResourceUserNotificationResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.UserNotificationStatusWrapper
import com.knetikcloud.client.model.ValueWrapperboolean
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class NotificationsApi(val defBasePath: String = "https://jsapi-integration.us-east-1.elasticbeanstalk.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new NotificationsApiAsyncHelper(client, config)

  /**
   * Create a notification type
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param notificationType notificationType (optional)
   * @return NotificationTypeResource
   */
  def createNotificationType(notificationType: Option[NotificationTypeResource] = None): Option[NotificationTypeResource] = {
    val await = Try(Await.result(createNotificationTypeAsync(notificationType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a notification type asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param notificationType notificationType (optional)
   * @return Future(NotificationTypeResource)
  */
  def createNotificationTypeAsync(notificationType: Option[NotificationTypeResource] = None): Future[NotificationTypeResource] = {
      helper.createNotificationType(notificationType)
  }


  /**
   * Delete a notification type
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param id id 
   * @return void
   */
  def deleteNotificationType(id: String) = {
    val await = Try(Await.result(deleteNotificationTypeAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a notification type asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param id id 
   * @return Future(void)
  */
  def deleteNotificationTypeAsync(id: String) = {
      helper.deleteNotificationType(id)
  }


  /**
   * Get a single notification type
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param id id 
   * @return NotificationTypeResource
   */
  def getNotificationType(id: String): Option[NotificationTypeResource] = {
    val await = Try(Await.result(getNotificationTypeAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single notification type asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param id id 
   * @return Future(NotificationTypeResource)
  */
  def getNotificationTypeAsync(id: String): Future[NotificationTypeResource] = {
      helper.getNotificationType(id)
  }


  /**
   * List and search notification types
   * Get a list of notification type with optional filtering. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceNotificationTypeResource
   */
  def getNotificationTypes(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceNotificationTypeResource] = {
    val await = Try(Await.result(getNotificationTypesAsync(size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search notification types asynchronously
   * Get a list of notification type with optional filtering. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceNotificationTypeResource)
  */
  def getNotificationTypesAsync(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceNotificationTypeResource] = {
      helper.getNotificationTypes(size, page, order)
  }


  /**
   * View a user&#39;s notification settings for a type
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param typeId The id of the topic 
   * @param userId The id of the subscriber or &#39;me&#39; 
   * @return NotificationUserTypeResource
   */
  def getUserNotificationInfo(typeId: String, userId: String): Option[NotificationUserTypeResource] = {
    val await = Try(Await.result(getUserNotificationInfoAsync(typeId, userId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View a user&#39;s notification settings for a type asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param typeId The id of the topic 
   * @param userId The id of the subscriber or &#39;me&#39; 
   * @return Future(NotificationUserTypeResource)
  */
  def getUserNotificationInfoAsync(typeId: String, userId: String): Future[NotificationUserTypeResource] = {
      helper.getUserNotificationInfo(typeId, userId)
  }


  /**
   * View a user&#39;s notification settings
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param userId The id of the subscriber or &#39;me&#39; 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceNotificationUserTypeResource
   */
  def getUserNotificationInfoList(userId: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceNotificationUserTypeResource] = {
    val await = Try(Await.result(getUserNotificationInfoListAsync(userId, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View a user&#39;s notification settings asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param userId The id of the subscriber or &#39;me&#39; 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceNotificationUserTypeResource)
  */
  def getUserNotificationInfoListAsync(userId: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceNotificationUserTypeResource] = {
      helper.getUserNotificationInfoList(userId, size, page, order)
  }


  /**
   * Get notifications
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param id The id of the user or &#39;me&#39; 
   * @param filterStatus filter for notifications with a given status (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceUserNotificationResource
   */
  def getUserNotifications(id: String, filterStatus: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceUserNotificationResource] = {
    val await = Try(Await.result(getUserNotificationsAsync(id, filterStatus, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get notifications asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param id The id of the user or &#39;me&#39; 
   * @param filterStatus filter for notifications with a given status (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceUserNotificationResource)
  */
  def getUserNotificationsAsync(id: String, filterStatus: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceUserNotificationResource] = {
      helper.getUserNotifications(id, filterStatus, size, page, order)
  }


  /**
   * Send a notification
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param notification notification (optional)
   * @return NotificationResource
   */
  def sendNotification(notification: Option[NotificationResource] = None): Option[NotificationResource] = {
    val await = Try(Await.result(sendNotificationAsync(notification), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a notification asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param notification notification (optional)
   * @return Future(NotificationResource)
  */
  def sendNotificationAsync(notification: Option[NotificationResource] = None): Future[NotificationResource] = {
      helper.sendNotification(notification)
  }


  /**
   * Set notification status
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param userId The id of the user or &#39;me&#39; 
   * @param notificationId The id of the notification 
   * @param notification status (optional)
   * @return void
   */
  def setUserNotificationStatus(userId: String, notificationId: String, notification: Option[UserNotificationStatusWrapper] = None) = {
    val await = Try(Await.result(setUserNotificationStatusAsync(userId, notificationId, notification), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set notification status asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param userId The id of the user or &#39;me&#39; 
   * @param notificationId The id of the notification 
   * @param notification status (optional)
   * @return Future(void)
  */
  def setUserNotificationStatusAsync(userId: String, notificationId: String, notification: Option[UserNotificationStatusWrapper] = None) = {
      helper.setUserNotificationStatus(userId, notificationId, notification)
  }


  /**
   * Enable or disable direct notifications for a user
   * Allows enabling or disabling messages for a given notification type when sent direct to the user. Notifications can still be retrieved by endpoint. For notifications broadcased to a topic, see the topic service to disable messages for the user there. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param typeId The id of the topic 
   * @param userId The id of the subscriber or &#39;me&#39; 
   * @param silenced silenced 
   * @return void
   */
  def silenceDirectNotifications(typeId: String, userId: String, silenced: ValueWrapperboolean) = {
    val await = Try(Await.result(silenceDirectNotificationsAsync(typeId, userId, silenced), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Enable or disable direct notifications for a user asynchronously
   * Allows enabling or disabling messages for a given notification type when sent direct to the user. Notifications can still be retrieved by endpoint. For notifications broadcased to a topic, see the topic service to disable messages for the user there. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN or self
   * @param typeId The id of the topic 
   * @param userId The id of the subscriber or &#39;me&#39; 
   * @param silenced silenced 
   * @return Future(void)
  */
  def silenceDirectNotificationsAsync(typeId: String, userId: String, silenced: ValueWrapperboolean) = {
      helper.silenceDirectNotifications(typeId, userId, silenced)
  }


  /**
   * Update a notificationType
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param id id 
   * @param notificationType notificationType (optional)
   * @return NotificationTypeResource
   */
  def updateNotificationType(id: String, notificationType: Option[NotificationTypeResource] = None): Option[NotificationTypeResource] = {
    val await = Try(Await.result(updateNotificationTypeAsync(id, notificationType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a notificationType asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; NOTIFICATIONS_ADMIN
   * @param id id 
   * @param notificationType notificationType (optional)
   * @return Future(NotificationTypeResource)
  */
  def updateNotificationTypeAsync(id: String, notificationType: Option[NotificationTypeResource] = None): Future[NotificationTypeResource] = {
      helper.updateNotificationType(id, notificationType)
  }


}

class NotificationsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createNotificationType(notificationType: Option[NotificationTypeResource] = None
    )(implicit reader: ClientResponseReader[NotificationTypeResource], writer: RequestWriter[NotificationTypeResource]): Future[NotificationTypeResource] = {
    // create path and map variables
    val path = (addFmt("/notifications/types"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(notificationType))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteNotificationType(id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/notifications/types/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling NotificationsApi->deleteNotificationType")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getNotificationType(id: String)(implicit reader: ClientResponseReader[NotificationTypeResource]): Future[NotificationTypeResource] = {
    // create path and map variables
    val path = (addFmt("/notifications/types/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling NotificationsApi->getNotificationType")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getNotificationTypes(size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceNotificationTypeResource]): Future[PageResourceNotificationTypeResource] = {
    // create path and map variables
    val path = (addFmt("/notifications/types"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserNotificationInfo(typeId: String,
    userId: String)(implicit reader: ClientResponseReader[NotificationUserTypeResource]): Future[NotificationUserTypeResource] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}/notifications/types/{type_id}")
      replaceAll ("\\{" + "type_id" + "\\}",typeId.toString)
      replaceAll ("\\{" + "user_id" + "\\}",userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (typeId == null) throw new Exception("Missing required parameter 'typeId' when calling NotificationsApi->getUserNotificationInfo")

    if (userId == null) throw new Exception("Missing required parameter 'userId' when calling NotificationsApi->getUserNotificationInfo")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserNotificationInfoList(userId: String,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceNotificationUserTypeResource]): Future[PageResourceNotificationUserTypeResource] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}/notifications/types")
      replaceAll ("\\{" + "user_id" + "\\}",userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (userId == null) throw new Exception("Missing required parameter 'userId' when calling NotificationsApi->getUserNotificationInfoList")

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserNotifications(id: String,
    filterStatus: Option[String] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceUserNotificationResource]): Future[PageResourceUserNotificationResource] = {
    // create path and map variables
    val path = (addFmt("/users/{id}/notifications")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling NotificationsApi->getUserNotifications")

    filterStatus match {
      case Some(param) => queryParams += "filter_status" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendNotification(notification: Option[NotificationResource] = None
    )(implicit reader: ClientResponseReader[NotificationResource], writer: RequestWriter[NotificationResource]): Future[NotificationResource] = {
    // create path and map variables
    val path = (addFmt("/notifications"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(notification))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def setUserNotificationStatus(userId: String,
    notificationId: String,
    notification: Option[UserNotificationStatusWrapper] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[UserNotificationStatusWrapper]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}/notifications/{notification_id}/status")
      replaceAll ("\\{" + "user_id" + "\\}",userId.toString)
      replaceAll ("\\{" + "notification_id" + "\\}",notificationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (userId == null) throw new Exception("Missing required parameter 'userId' when calling NotificationsApi->setUserNotificationStatus")

    if (notificationId == null) throw new Exception("Missing required parameter 'notificationId' when calling NotificationsApi->setUserNotificationStatus")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(notification))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def silenceDirectNotifications(typeId: String,
    userId: String,
    silenced: ValueWrapperboolean)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[ValueWrapperboolean]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}/notifications/types/{type_id}/silenced")
      replaceAll ("\\{" + "type_id" + "\\}",typeId.toString)
      replaceAll ("\\{" + "user_id" + "\\}",userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (typeId == null) throw new Exception("Missing required parameter 'typeId' when calling NotificationsApi->silenceDirectNotifications")

    if (userId == null) throw new Exception("Missing required parameter 'userId' when calling NotificationsApi->silenceDirectNotifications")

    if (silenced == null) throw new Exception("Missing required parameter 'silenced' when calling NotificationsApi->silenceDirectNotifications")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(silenced))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateNotificationType(id: String,
    notificationType: Option[NotificationTypeResource] = None
    )(implicit reader: ClientResponseReader[NotificationTypeResource], writer: RequestWriter[NotificationTypeResource]): Future[NotificationTypeResource] = {
    // create path and map variables
    val path = (addFmt("/notifications/types/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling NotificationsApi->updateNotificationType")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(notificationType))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
