/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.BreTriggerResource
import com.knetikcloud.client.model.PageResourceBreTriggerResource
import com.knetikcloud.client.model.Result
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class Rule_Engine_TriggersApi(val defBasePath: String = "https://jsapi-integration.us-east-1.elasticbeanstalk.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new Rule_Engine_TriggersApiAsyncHelper(client, config)

  /**
   * Create a trigger
   * Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
   * @param breTriggerResource The BRE trigger resource object (optional)
   * @return BreTriggerResource
   */
  def createBRETrigger(breTriggerResource: Option[BreTriggerResource] = None): Option[BreTriggerResource] = {
    val await = Try(Await.result(createBRETriggerAsync(breTriggerResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a trigger asynchronously
   * Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
   * @param breTriggerResource The BRE trigger resource object (optional)
   * @return Future(BreTriggerResource)
  */
  def createBRETriggerAsync(breTriggerResource: Option[BreTriggerResource] = None): Future[BreTriggerResource] = {
      helper.createBRETrigger(breTriggerResource)
  }


  /**
   * Delete a trigger
   * May fail if there are existing rules against it. Cannot delete core triggers. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
   * @param eventName The trigger event name 
   * @return void
   */
  def deleteBRETrigger(eventName: String) = {
    val await = Try(Await.result(deleteBRETriggerAsync(eventName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a trigger asynchronously
   * May fail if there are existing rules against it. Cannot delete core triggers. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
   * @param eventName The trigger event name 
   * @return Future(void)
  */
  def deleteBRETriggerAsync(eventName: String) = {
      helper.deleteBRETrigger(eventName)
  }


  /**
   * Get a single trigger
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_USER
   * @param eventName The trigger event name 
   * @return BreTriggerResource
   */
  def getBRETrigger(eventName: String): Option[BreTriggerResource] = {
    val await = Try(Await.result(getBRETriggerAsync(eventName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single trigger asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_USER
   * @param eventName The trigger event name 
   * @return Future(BreTriggerResource)
  */
  def getBRETriggerAsync(eventName: String): Future[BreTriggerResource] = {
      helper.getBRETrigger(eventName)
  }


  /**
   * List triggers
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_USER
   * @param filterSystem Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)
   * @param filterCategory Filter for triggers that are within a specific category (optional)
   * @param filterTags Filter for triggers that have all of the given tags (comma separated list) (optional)
   * @param filterName Filter for triggers that have names containing the given string (optional)
   * @param filterSearch Filter for triggers containing the given words somewhere within name, description and tags (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return PageResourceBreTriggerResource
   */
  def getBRETriggers(filterSystem: Option[Boolean] = None, filterCategory: Option[String] = None, filterTags: Option[String] = None, filterName: Option[String] = None, filterSearch: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Option[PageResourceBreTriggerResource] = {
    val await = Try(Await.result(getBRETriggersAsync(filterSystem, filterCategory, filterTags, filterName, filterSearch, size, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List triggers asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_USER
   * @param filterSystem Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)
   * @param filterCategory Filter for triggers that are within a specific category (optional)
   * @param filterTags Filter for triggers that have all of the given tags (comma separated list) (optional)
   * @param filterName Filter for triggers that have names containing the given string (optional)
   * @param filterSearch Filter for triggers containing the given words somewhere within name, description and tags (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return Future(PageResourceBreTriggerResource)
  */
  def getBRETriggersAsync(filterSystem: Option[Boolean] = None, filterCategory: Option[String] = None, filterTags: Option[String] = None, filterName: Option[String] = None, filterSearch: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Future[PageResourceBreTriggerResource] = {
      helper.getBRETriggers(filterSystem, filterCategory, filterTags, filterName, filterSearch, size, page)
  }


  /**
   * Update a trigger
   * May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
   * @param eventName The trigger event name 
   * @param breTriggerResource The BRE trigger resource object (optional)
   * @return BreTriggerResource
   */
  def updateBRETrigger(eventName: String, breTriggerResource: Option[BreTriggerResource] = None): Option[BreTriggerResource] = {
    val await = Try(Await.result(updateBRETriggerAsync(eventName, breTriggerResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a trigger asynchronously
   * May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_TRIGGERS_ADMIN
   * @param eventName The trigger event name 
   * @param breTriggerResource The BRE trigger resource object (optional)
   * @return Future(BreTriggerResource)
  */
  def updateBRETriggerAsync(eventName: String, breTriggerResource: Option[BreTriggerResource] = None): Future[BreTriggerResource] = {
      helper.updateBRETrigger(eventName, breTriggerResource)
  }


}

class Rule_Engine_TriggersApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createBRETrigger(breTriggerResource: Option[BreTriggerResource] = None
    )(implicit reader: ClientResponseReader[BreTriggerResource], writer: RequestWriter[BreTriggerResource]): Future[BreTriggerResource] = {
    // create path and map variables
    val path = (addFmt("/bre/triggers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(breTriggerResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteBRETrigger(eventName: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/bre/triggers/{event_name}")
      replaceAll ("\\{" + "event_name" + "\\}",eventName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (eventName == null) throw new Exception("Missing required parameter 'eventName' when calling Rule_Engine_TriggersApi->deleteBRETrigger")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBRETrigger(eventName: String)(implicit reader: ClientResponseReader[BreTriggerResource]): Future[BreTriggerResource] = {
    // create path and map variables
    val path = (addFmt("/bre/triggers/{event_name}")
      replaceAll ("\\{" + "event_name" + "\\}",eventName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (eventName == null) throw new Exception("Missing required parameter 'eventName' when calling Rule_Engine_TriggersApi->getBRETrigger")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBRETriggers(filterSystem: Option[Boolean] = None,
    filterCategory: Option[String] = None,
    filterTags: Option[String] = None,
    filterName: Option[String] = None,
    filterSearch: Option[String] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1)
    )(implicit reader: ClientResponseReader[PageResourceBreTriggerResource]): Future[PageResourceBreTriggerResource] = {
    // create path and map variables
    val path = (addFmt("/bre/triggers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    filterSystem match {
      case Some(param) => queryParams += "filter_system" -> param.toString
      case _ => queryParams
    }
    filterCategory match {
      case Some(param) => queryParams += "filter_category" -> param.toString
      case _ => queryParams
    }
    filterTags match {
      case Some(param) => queryParams += "filter_tags" -> param.toString
      case _ => queryParams
    }
    filterName match {
      case Some(param) => queryParams += "filter_name" -> param.toString
      case _ => queryParams
    }
    filterSearch match {
      case Some(param) => queryParams += "filter_search" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateBRETrigger(eventName: String,
    breTriggerResource: Option[BreTriggerResource] = None
    )(implicit reader: ClientResponseReader[BreTriggerResource], writer: RequestWriter[BreTriggerResource]): Future[BreTriggerResource] = {
    // create path and map variables
    val path = (addFmt("/bre/triggers/{event_name}")
      replaceAll ("\\{" + "event_name" + "\\}",eventName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (eventName == null) throw new Exception("Missing required parameter 'eventName' when calling Rule_Engine_TriggersApi->updateBRETrigger")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(breTriggerResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
