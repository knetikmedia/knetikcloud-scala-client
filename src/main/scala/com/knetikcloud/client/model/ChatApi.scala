/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.ChatBlacklistResource
import com.knetikcloud.client.model.ChatMessageResource
import com.knetikcloud.client.model.PageResourceChatMessageResource
import com.knetikcloud.client.model.PageResourceChatUserThreadResource
import com.knetikcloud.client.model.Result
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class ChatApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ChatApiAsyncHelper(client, config)

  /**
   * Acknowledge number of messages in a thread
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param id The thread id 
   * @param readCount The amount of messages read (optional)
   * @return void
   */
  def acknowledgeChatMessage(id: String, readCount: Option[Integer] = None) = {
    val await = Try(Await.result(acknowledgeChatMessageAsync(id, readCount), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Acknowledge number of messages in a thread asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param id The thread id 
   * @param readCount The amount of messages read (optional)
   * @return Future(void)
  */
  def acknowledgeChatMessageAsync(id: String, readCount: Option[Integer] = None) = {
      helper.acknowledgeChatMessage(id, readCount)
  }


  /**
   * Add a user to a chat message blacklist
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param blacklistedUserId The user id to blacklist 
   * @param id The user id or &#39;me&#39; 
   * @return void
   */
  def addChatMessageBlacklist(blacklistedUserId: Integer, id: String) = {
    val await = Try(Await.result(addChatMessageBlacklistAsync(blacklistedUserId, id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add a user to a chat message blacklist asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param blacklistedUserId The user id to blacklist 
   * @param id The user id or &#39;me&#39; 
   * @return Future(void)
  */
  def addChatMessageBlacklistAsync(blacklistedUserId: Integer, id: String) = {
      helper.addChatMessageBlacklist(blacklistedUserId, id)
  }


  /**
   * Delete a message
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The message id 
   * @return void
   */
  def deleteChatMessage(id: String) = {
    val await = Try(Await.result(deleteChatMessageAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a message asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The message id 
   * @return Future(void)
  */
  def deleteChatMessageAsync(id: String) = {
      helper.deleteChatMessage(id)
  }


  /**
   * Edit your message
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param id The message id 
   * @param chatMessageResource The chat message resource (optional)
   * @return void
   */
  def editChatMessage(id: String, chatMessageResource: Option[ChatMessageResource] = None) = {
    val await = Try(Await.result(editChatMessageAsync(id, chatMessageResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Edit your message asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param id The message id 
   * @param chatMessageResource The chat message resource (optional)
   * @return Future(void)
  */
  def editChatMessageAsync(id: String, chatMessageResource: Option[ChatMessageResource] = None) = {
      helper.editChatMessage(id, chatMessageResource)
  }


  /**
   * Get a message
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The message id 
   * @return ChatMessageResource
   */
  def getChatMessage(id: String): Option[ChatMessageResource] = {
    val await = Try(Await.result(getChatMessageAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a message asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The message id 
   * @return Future(ChatMessageResource)
  */
  def getChatMessageAsync(id: String): Future[ChatMessageResource] = {
      helper.getChatMessage(id)
  }


  /**
   * Get a list of blocked users for chat messaging
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The user id or &#39;me&#39; 
   * @return List[ChatBlacklistResource]
   */
  def getChatMessageBlacklist(id: String): Option[List[ChatBlacklistResource]] = {
    val await = Try(Await.result(getChatMessageBlacklistAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of blocked users for chat messaging asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The user id or &#39;me&#39; 
   * @return Future(List[ChatBlacklistResource])
  */
  def getChatMessageBlacklistAsync(id: String): Future[List[ChatBlacklistResource]] = {
      helper.getChatMessageBlacklist(id)
  }


  /**
   * List your threads
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return PageResourceChatUserThreadResource
   */
  def getChatThreads(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Option[PageResourceChatUserThreadResource] = {
    val await = Try(Await.result(getChatThreadsAsync(size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List your threads asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return Future(PageResourceChatUserThreadResource)
  */
  def getChatThreadsAsync(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Future[PageResourceChatUserThreadResource] = {
      helper.getChatThreads(size, page, order)
  }


  /**
   * List messages with a user
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param id The user id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return PageResourceChatMessageResource
   */
  def getDirectMessages(id: Integer, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Option[PageResourceChatMessageResource] = {
    val await = Try(Await.result(getDirectMessagesAsync(id, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List messages with a user asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
   * @param id The user id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return Future(PageResourceChatMessageResource)
  */
  def getDirectMessagesAsync(id: Integer, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Future[PageResourceChatMessageResource] = {
      helper.getDirectMessages(id, size, page, order)
  }


  /**
   * List messages in a thread
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The thread id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return PageResourceChatMessageResource
   */
  def getThreadMessages(id: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Option[PageResourceChatMessageResource] = {
    val await = Try(Await.result(getThreadMessagesAsync(id, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List messages in a thread asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The thread id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return Future(PageResourceChatMessageResource)
  */
  def getThreadMessagesAsync(id: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Future[PageResourceChatMessageResource] = {
      helper.getThreadMessages(id, size, page, order)
  }


  /**
   * List messages in a topic
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The topic id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return PageResourceChatMessageResource
   */
  def getTopicMessages(id: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Option[PageResourceChatMessageResource] = {
    val await = Try(Await.result(getTopicMessagesAsync(id, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List messages in a topic asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param id The topic id 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return Future(PageResourceChatMessageResource)
  */
  def getTopicMessagesAsync(id: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Future[PageResourceChatMessageResource] = {
      helper.getTopicMessages(id, size, page, order)
  }


  /**
   * Remove a user from a blacklist
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param blacklistedUserId The user id to blacklist 
   * @param id The user id or &#39;me&#39; 
   * @return void
   */
  def removeChatBlacklist(blacklistedUserId: Integer, id: String) = {
    val await = Try(Await.result(removeChatBlacklistAsync(blacklistedUserId, id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Remove a user from a blacklist asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
   * @param blacklistedUserId The user id to blacklist 
   * @param id The user id or &#39;me&#39; 
   * @return Future(void)
  */
  def removeChatBlacklistAsync(blacklistedUserId: Integer, id: String) = {
      helper.removeChatBlacklist(blacklistedUserId, id)
  }


  /**
   * Send a message
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param chatMessageResource The chat message resource (optional)
   * @return ChatMessageResource
   */
  def sendMessage(chatMessageResource: Option[ChatMessageResource] = None): Option[ChatMessageResource] = {
    val await = Try(Await.result(sendMessageAsync(chatMessageResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a message asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param chatMessageResource The chat message resource (optional)
   * @return Future(ChatMessageResource)
  */
  def sendMessageAsync(chatMessageResource: Option[ChatMessageResource] = None): Future[ChatMessageResource] = {
      helper.sendMessage(chatMessageResource)
  }


}

class ChatApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def acknowledgeChatMessage(id: String,
    readCount: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Integer]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/chat/threads/{id}/acknowledge")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->acknowledgeChatMessage")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(readCount))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def addChatMessageBlacklist(blacklistedUserId: Integer,
    id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/chat/users/{id}/blacklist/{blacklisted_user_id}")
      replaceAll ("\\{" + "blacklisted_user_id" + "\\}",blacklistedUserId.toString)
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->addChatMessageBlacklist")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteChatMessage(id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/chat/messages/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->deleteChatMessage")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def editChatMessage(id: String,
    chatMessageResource: Option[ChatMessageResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[ChatMessageResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/chat/messages/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->editChatMessage")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(chatMessageResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChatMessage(id: String)(implicit reader: ClientResponseReader[ChatMessageResource]): Future[ChatMessageResource] = {
    // create path and map variables
    val path = (addFmt("/chat/messages/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->getChatMessage")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChatMessageBlacklist(id: String)(implicit reader: ClientResponseReader[List[ChatBlacklistResource]]): Future[List[ChatBlacklistResource]] = {
    // create path and map variables
    val path = (addFmt("/chat/users/{id}/blacklist")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->getChatMessageBlacklist")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChatThreads(size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = None
    )(implicit reader: ClientResponseReader[PageResourceChatUserThreadResource]): Future[PageResourceChatUserThreadResource] = {
    // create path and map variables
    val path = (addFmt("/chat/threads"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getDirectMessages(id: Integer,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = None
    )(implicit reader: ClientResponseReader[PageResourceChatMessageResource]): Future[PageResourceChatMessageResource] = {
    // create path and map variables
    val path = (addFmt("/chat/users/{id}/messages")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getThreadMessages(id: String,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = None
    )(implicit reader: ClientResponseReader[PageResourceChatMessageResource]): Future[PageResourceChatMessageResource] = {
    // create path and map variables
    val path = (addFmt("/chat/threads/{id}/messages")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->getThreadMessages")

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getTopicMessages(id: String,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = None
    )(implicit reader: ClientResponseReader[PageResourceChatMessageResource]): Future[PageResourceChatMessageResource] = {
    // create path and map variables
    val path = (addFmt("/chat/topics/{id}/messages")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->getTopicMessages")

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def removeChatBlacklist(blacklistedUserId: Integer,
    id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/chat/users/{id}/blacklist/{blacklisted_user_id}")
      replaceAll ("\\{" + "blacklisted_user_id" + "\\}",blacklistedUserId.toString)
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ChatApi->removeChatBlacklist")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendMessage(chatMessageResource: Option[ChatMessageResource] = None
    )(implicit reader: ClientResponseReader[ChatMessageResource], writer: RequestWriter[ChatMessageResource]): Future[ChatMessageResource] = {
    // create path and map variables
    val path = (addFmt("/chat/messages"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(chatMessageResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
