/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.PageResourceRevenueCountryReportResource
import com.knetikcloud.client.model.PageResourceRevenueProductReportResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.RevenueReportResource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class Reporting_RevenueApi(val defBasePath: String = "https://jsapi-integration.us-east-1.elasticbeanstalk.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new Reporting_RevenueApiAsyncHelper(client, config)

  /**
   * Get item revenue info
   * Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @return RevenueReportResource
   */
  def getItemRevenue(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None): Option[RevenueReportResource] = {
    val await = Try(Await.result(getItemRevenueAsync(currencyCode, startDate, endDate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get item revenue info asynchronously
   * Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @return Future(RevenueReportResource)
  */
  def getItemRevenueAsync(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None): Future[RevenueReportResource] = {
      helper.getItemRevenue(currencyCode, startDate, endDate)
  }


  /**
   * Get refund revenue info
   * Get basic info about revenue loss from refunds (for all item types), summed up within a time range. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get refund data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @return RevenueReportResource
   */
  def getRefundRevenue(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None): Option[RevenueReportResource] = {
    val await = Try(Await.result(getRefundRevenueAsync(currencyCode, startDate, endDate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get refund revenue info asynchronously
   * Get basic info about revenue loss from refunds (for all item types), summed up within a time range. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get refund data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @return Future(RevenueReportResource)
  */
  def getRefundRevenueAsync(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None): Future[RevenueReportResource] = {
      helper.getRefundRevenue(currencyCode, startDate, endDate)
  }


  /**
   * Get revenue info by country
   * Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return PageResourceRevenueCountryReportResource
   */
  def getRevenueByCountry(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Option[PageResourceRevenueCountryReportResource] = {
    val await = Try(Await.result(getRevenueByCountryAsync(currencyCode, startDate, endDate, size, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get revenue info by country asynchronously
   * Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return Future(PageResourceRevenueCountryReportResource)
  */
  def getRevenueByCountryAsync(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Future[PageResourceRevenueCountryReportResource] = {
      helper.getRevenueByCountry(currencyCode, startDate, endDate, size, page)
  }


  /**
   * Get revenue info by item
   * Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return PageResourceRevenueProductReportResource
   */
  def getRevenueByItem(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Option[PageResourceRevenueProductReportResource] = {
    val await = Try(Await.result(getRevenueByItemAsync(currencyCode, startDate, endDate, size, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get revenue info by item asynchronously
   * Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return Future(PageResourceRevenueProductReportResource)
  */
  def getRevenueByItemAsync(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Future[PageResourceRevenueProductReportResource] = {
      helper.getRevenueByItem(currencyCode, startDate, endDate, size, page)
  }


  /**
   * Get subscription revenue info
   * Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @return RevenueReportResource
   */
  def getSubscriptionRevenue(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None): Option[RevenueReportResource] = {
    val await = Try(Await.result(getSubscriptionRevenueAsync(currencyCode, startDate, endDate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get subscription revenue info asynchronously
   * Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; REPORTING_REVENUE_ADMIN
   * @param currencyCode The code for a currency to get sales data for 
   * @param startDate The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
   * @param endDate The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
   * @return Future(RevenueReportResource)
  */
  def getSubscriptionRevenueAsync(currencyCode: String, startDate: Option[Long] = None, endDate: Option[Long] = None): Future[RevenueReportResource] = {
      helper.getSubscriptionRevenue(currencyCode, startDate, endDate)
  }


}

class Reporting_RevenueApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getItemRevenue(currencyCode: String,
    startDate: Option[Long] = None,
    endDate: Option[Long] = None
    )(implicit reader: ClientResponseReader[RevenueReportResource]): Future[RevenueReportResource] = {
    // create path and map variables
    val path = (addFmt("/reporting/revenue/item-sales/{currency_code}")
      replaceAll ("\\{" + "currency_code" + "\\}",currencyCode.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (currencyCode == null) throw new Exception("Missing required parameter 'currencyCode' when calling Reporting_RevenueApi->getItemRevenue")

    startDate match {
      case Some(param) => queryParams += "start_date" -> param.toString
      case _ => queryParams
    }
    endDate match {
      case Some(param) => queryParams += "end_date" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRefundRevenue(currencyCode: String,
    startDate: Option[Long] = None,
    endDate: Option[Long] = None
    )(implicit reader: ClientResponseReader[RevenueReportResource]): Future[RevenueReportResource] = {
    // create path and map variables
    val path = (addFmt("/reporting/revenue/refunds/{currency_code}")
      replaceAll ("\\{" + "currency_code" + "\\}",currencyCode.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (currencyCode == null) throw new Exception("Missing required parameter 'currencyCode' when calling Reporting_RevenueApi->getRefundRevenue")

    startDate match {
      case Some(param) => queryParams += "start_date" -> param.toString
      case _ => queryParams
    }
    endDate match {
      case Some(param) => queryParams += "end_date" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRevenueByCountry(currencyCode: String,
    startDate: Option[Long] = None,
    endDate: Option[Long] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1)
    )(implicit reader: ClientResponseReader[PageResourceRevenueCountryReportResource]): Future[PageResourceRevenueCountryReportResource] = {
    // create path and map variables
    val path = (addFmt("/reporting/revenue/countries/{currency_code}")
      replaceAll ("\\{" + "currency_code" + "\\}",currencyCode.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (currencyCode == null) throw new Exception("Missing required parameter 'currencyCode' when calling Reporting_RevenueApi->getRevenueByCountry")

    startDate match {
      case Some(param) => queryParams += "start_date" -> param.toString
      case _ => queryParams
    }
    endDate match {
      case Some(param) => queryParams += "end_date" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRevenueByItem(currencyCode: String,
    startDate: Option[Long] = None,
    endDate: Option[Long] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1)
    )(implicit reader: ClientResponseReader[PageResourceRevenueProductReportResource]): Future[PageResourceRevenueProductReportResource] = {
    // create path and map variables
    val path = (addFmt("/reporting/revenue/products/{currency_code}")
      replaceAll ("\\{" + "currency_code" + "\\}",currencyCode.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (currencyCode == null) throw new Exception("Missing required parameter 'currencyCode' when calling Reporting_RevenueApi->getRevenueByItem")

    startDate match {
      case Some(param) => queryParams += "start_date" -> param.toString
      case _ => queryParams
    }
    endDate match {
      case Some(param) => queryParams += "end_date" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubscriptionRevenue(currencyCode: String,
    startDate: Option[Long] = None,
    endDate: Option[Long] = None
    )(implicit reader: ClientResponseReader[RevenueReportResource]): Future[RevenueReportResource] = {
    // create path and map variables
    val path = (addFmt("/reporting/revenue/subscription-sales/{currency_code}")
      replaceAll ("\\{" + "currency_code" + "\\}",currencyCode.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (currencyCode == null) throw new Exception("Missing required parameter 'currencyCode' when calling Reporting_RevenueApi->getSubscriptionRevenue")

    startDate match {
      case Some(param) => queryParams += "start_date" -> param.toString
      case _ => queryParams
    }
    endDate match {
      case Some(param) => queryParams += "end_date" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
