/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.RawEmailResource
import com.knetikcloud.client.model.RawPushResource
import com.knetikcloud.client.model.RawSMSResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.TemplateEmailResource
import com.knetikcloud.client.model.TemplatePushResource
import com.knetikcloud.client.model.TemplateSMSResource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class MessagingApi(val defBasePath: String = "https://devsandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new MessagingApiAsyncHelper(client, config)

  /**
   * Send a raw email to one or more users
   * 
   * @param rawEmailResource The new raw email to be sent (optional)
   * @return void
   */
  def sendRawEmail(rawEmailResource: Option[RawEmailResource] = None) = {
    val await = Try(Await.result(sendRawEmailAsync(rawEmailResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a raw email to one or more users asynchronously
   * 
   * @param rawEmailResource The new raw email to be sent (optional)
   * @return Future(void)
  */
  def sendRawEmailAsync(rawEmailResource: Option[RawEmailResource] = None) = {
      helper.sendRawEmail(rawEmailResource)
  }


  /**
   * Send a raw push notification
   * Sends a raw push notification message to one or more users. User&#39;s without registered mobile device for the application will be skipped.
   * @param rawPushResource The new raw push notification to be sent (optional)
   * @return void
   */
  def sendRawPush(rawPushResource: Option[RawPushResource] = None) = {
    val await = Try(Await.result(sendRawPushAsync(rawPushResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a raw push notification asynchronously
   * Sends a raw push notification message to one or more users. User&#39;s without registered mobile device for the application will be skipped.
   * @param rawPushResource The new raw push notification to be sent (optional)
   * @return Future(void)
  */
  def sendRawPushAsync(rawPushResource: Option[RawPushResource] = None) = {
      helper.sendRawPush(rawPushResource)
  }


  /**
   * Send a raw SMS
   * Sends a raw SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
   * @param rawSMSResource The new raw SMS to be sent (optional)
   * @return void
   */
  def sendRawSMS(rawSMSResource: Option[RawSMSResource] = None) = {
    val await = Try(Await.result(sendRawSMSAsync(rawSMSResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a raw SMS asynchronously
   * Sends a raw SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
   * @param rawSMSResource The new raw SMS to be sent (optional)
   * @return Future(void)
  */
  def sendRawSMSAsync(rawSMSResource: Option[RawSMSResource] = None) = {
      helper.sendRawSMS(rawSMSResource)
  }


  /**
   * Send a templated email to one or more users
   * 
   * @param messageResource The new template email to be sent (optional)
   * @return void
   */
  def sendTemplatedEmail(messageResource: Option[TemplateEmailResource] = None) = {
    val await = Try(Await.result(sendTemplatedEmailAsync(messageResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a templated email to one or more users asynchronously
   * 
   * @param messageResource The new template email to be sent (optional)
   * @return Future(void)
  */
  def sendTemplatedEmailAsync(messageResource: Option[TemplateEmailResource] = None) = {
      helper.sendTemplatedEmail(messageResource)
  }


  /**
   * Send a templated push notification
   * Sends a templated push notification message to one or more users. User&#39;s without registered mobile device for the application will be skipped.
   * @param templatePushResource The new templated push notification to be sent (optional)
   * @return void
   */
  def sendTemplatedPush(templatePushResource: Option[TemplatePushResource] = None) = {
    val await = Try(Await.result(sendTemplatedPushAsync(templatePushResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a templated push notification asynchronously
   * Sends a templated push notification message to one or more users. User&#39;s without registered mobile device for the application will be skipped.
   * @param templatePushResource The new templated push notification to be sent (optional)
   * @return Future(void)
  */
  def sendTemplatedPushAsync(templatePushResource: Option[TemplatePushResource] = None) = {
      helper.sendTemplatedPush(templatePushResource)
  }


  /**
   * Send a new templated SMS
   * Sends a templated SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
   * @param templateSMSResource The new template SMS to be sent (optional)
   * @return void
   */
  def sendTemplatedSMS(templateSMSResource: Option[TemplateSMSResource] = None) = {
    val await = Try(Await.result(sendTemplatedSMSAsync(templateSMSResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a new templated SMS asynchronously
   * Sends a templated SMS text message to one or more users. User&#39;s without registered mobile numbers will be skipped.
   * @param templateSMSResource The new template SMS to be sent (optional)
   * @return Future(void)
  */
  def sendTemplatedSMSAsync(templateSMSResource: Option[TemplateSMSResource] = None) = {
      helper.sendTemplatedSMS(templateSMSResource)
  }


}

class MessagingApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def sendRawEmail(rawEmailResource: Option[RawEmailResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[RawEmailResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/messaging/raw-email"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(rawEmailResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendRawPush(rawPushResource: Option[RawPushResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[RawPushResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/messaging/raw-push"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(rawPushResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendRawSMS(rawSMSResource: Option[RawSMSResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[RawSMSResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/messaging/raw-sms"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(rawSMSResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendTemplatedEmail(messageResource: Option[TemplateEmailResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[TemplateEmailResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/messaging/templated-email"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(messageResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendTemplatedPush(templatePushResource: Option[TemplatePushResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[TemplatePushResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/messaging/templated-push"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(templatePushResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendTemplatedSMS(templateSMSResource: Option[TemplateSMSResource] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[TemplateSMSResource]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/messaging/templated-sms"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(templateSMSResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
