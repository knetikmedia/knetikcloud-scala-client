/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.ClientResource
import com.knetikcloud.client.model.PageResourceRoleResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.RoleResource
import com.knetikcloud.client.model.UserResource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class AuthRolesApi(val defBasePath: String = "https://devsandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AuthRolesApiAsyncHelper(client, config)

  /**
   * Create a new role
   * 
   * @param roleResource The role resource object (optional)
   * @return RoleResource
   */
  def createRole(roleResource: Option[RoleResource] = None): Option[RoleResource] = {
    val await = Try(Await.result(createRoleAsync(roleResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a new role asynchronously
   * 
   * @param roleResource The role resource object (optional)
   * @return Future(RoleResource)
  */
  def createRoleAsync(roleResource: Option[RoleResource] = None): Future[RoleResource] = {
      helper.createRole(roleResource)
  }


  /**
   * Delete a role
   * 
   * @param role The role value 
   * @param force If true, removes role from users/clients (optional)
   * @return void
   */
  def deleteRole(role: String, force: Option[Boolean] = None) = {
    val await = Try(Await.result(deleteRoleAsync(role, force), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a role asynchronously
   * 
   * @param role The role value 
   * @param force If true, removes role from users/clients (optional)
   * @return Future(void)
  */
  def deleteRoleAsync(role: String, force: Option[Boolean] = None) = {
      helper.deleteRole(role, force)
  }


  /**
   * Get roles for a client
   * 
   * @param clientKey The client key 
   * @return List[RoleResource]
   */
  def getClientRoles(clientKey: String): Option[List[RoleResource]] = {
    val await = Try(Await.result(getClientRolesAsync(clientKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get roles for a client asynchronously
   * 
   * @param clientKey The client key 
   * @return Future(List[RoleResource])
  */
  def getClientRolesAsync(clientKey: String): Future[List[RoleResource]] = {
      helper.getClientRoles(clientKey)
  }


  /**
   * Get a single role
   * 
   * @param role The role value 
   * @return RoleResource
   */
  def getRole(role: String): Option[RoleResource] = {
    val await = Try(Await.result(getRoleAsync(role), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single role asynchronously
   * 
   * @param role The role value 
   * @return Future(RoleResource)
  */
  def getRoleAsync(role: String): Future[RoleResource] = {
      helper.getRole(role)
  }


  /**
   * List and search roles
   * 
   * @param filterName Filter for roles that have a name starting with specified string (optional)
   * @param filterRole Filter for roles that have a role starting with specified string (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return PageResourceRoleResource
   */
  def getRoles(filterName: Option[String] = None, filterRole: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Option[PageResourceRoleResource] = {
    val await = Try(Await.result(getRolesAsync(filterName, filterRole, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search roles asynchronously
   * 
   * @param filterName Filter for roles that have a name starting with specified string (optional)
   * @param filterRole Filter for roles that have a role starting with specified string (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return Future(PageResourceRoleResource)
  */
  def getRolesAsync(filterName: Option[String] = None, filterRole: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Future[PageResourceRoleResource] = {
      helper.getRoles(filterName, filterRole, size, page, order)
  }


  /**
   * Get roles for a user
   * 
   * @param userId The user&#39;s id 
   * @return List[RoleResource]
   */
  def getUserRoles(userId: Integer): Option[List[RoleResource]] = {
    val await = Try(Await.result(getUserRolesAsync(userId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get roles for a user asynchronously
   * 
   * @param userId The user&#39;s id 
   * @return Future(List[RoleResource])
  */
  def getUserRolesAsync(userId: Integer): Future[List[RoleResource]] = {
      helper.getUserRoles(userId)
  }


  /**
   * Set roles for a client
   * 
   * @param clientKey The client key 
   * @param rolesList The list of unique roles (optional)
   * @return ClientResource
   */
  def setClientRoles(clientKey: String, rolesList: Option[List[String]] = None): Option[ClientResource] = {
    val await = Try(Await.result(setClientRolesAsync(clientKey, rolesList), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set roles for a client asynchronously
   * 
   * @param clientKey The client key 
   * @param rolesList The list of unique roles (optional)
   * @return Future(ClientResource)
  */
  def setClientRolesAsync(clientKey: String, rolesList: Option[List[String]] = None): Future[ClientResource] = {
      helper.setClientRoles(clientKey, rolesList)
  }


  /**
   * Set permissions for a role
   * 
   * @param role The role value 
   * @param permissionsList The list of unique permissions (optional)
   * @return RoleResource
   */
  def setPermissionsForRole(role: String, permissionsList: Option[List[String]] = None): Option[RoleResource] = {
    val await = Try(Await.result(setPermissionsForRoleAsync(role, permissionsList), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set permissions for a role asynchronously
   * 
   * @param role The role value 
   * @param permissionsList The list of unique permissions (optional)
   * @return Future(RoleResource)
  */
  def setPermissionsForRoleAsync(role: String, permissionsList: Option[List[String]] = None): Future[RoleResource] = {
      helper.setPermissionsForRole(role, permissionsList)
  }


  /**
   * Set roles for a user
   * 
   * @param userId The user&#39;s id 
   * @param rolesList The list of unique roles (optional)
   * @return UserResource
   */
  def setUserRoles(userId: Integer, rolesList: Option[List[String]] = None): Option[UserResource] = {
    val await = Try(Await.result(setUserRolesAsync(userId, rolesList), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set roles for a user asynchronously
   * 
   * @param userId The user&#39;s id 
   * @param rolesList The list of unique roles (optional)
   * @return Future(UserResource)
  */
  def setUserRolesAsync(userId: Integer, rolesList: Option[List[String]] = None): Future[UserResource] = {
      helper.setUserRoles(userId, rolesList)
  }


  /**
   * Update a role
   * 
   * @param role The role value 
   * @param roleResource The role resource object (optional)
   * @return RoleResource
   */
  def updateRole(role: String, roleResource: Option[RoleResource] = None): Option[RoleResource] = {
    val await = Try(Await.result(updateRoleAsync(role, roleResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a role asynchronously
   * 
   * @param role The role value 
   * @param roleResource The role resource object (optional)
   * @return Future(RoleResource)
  */
  def updateRoleAsync(role: String, roleResource: Option[RoleResource] = None): Future[RoleResource] = {
      helper.updateRole(role, roleResource)
  }


}

class AuthRolesApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createRole(roleResource: Option[RoleResource] = None
    )(implicit reader: ClientResponseReader[RoleResource], writer: RequestWriter[RoleResource]): Future[RoleResource] = {
    // create path and map variables
    val path = (addFmt("/auth/roles"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(roleResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteRole(role: String,
    force: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/auth/roles/{role}")
      replaceAll ("\\{" + "role" + "\\}",role.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (role == null) throw new Exception("Missing required parameter 'role' when calling AuthRolesApi->deleteRole")

    force match {
      case Some(param) => queryParams += "force" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getClientRoles(clientKey: String)(implicit reader: ClientResponseReader[List[RoleResource]]): Future[List[RoleResource]] = {
    // create path and map variables
    val path = (addFmt("/auth/clients/{client_key}/roles")
      replaceAll ("\\{" + "client_key" + "\\}",clientKey.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (clientKey == null) throw new Exception("Missing required parameter 'clientKey' when calling AuthRolesApi->getClientRoles")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRole(role: String)(implicit reader: ClientResponseReader[RoleResource]): Future[RoleResource] = {
    // create path and map variables
    val path = (addFmt("/auth/roles/{role}")
      replaceAll ("\\{" + "role" + "\\}",role.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (role == null) throw new Exception("Missing required parameter 'role' when calling AuthRolesApi->getRole")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRoles(filterName: Option[String] = None,
    filterRole: Option[String] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = None
    )(implicit reader: ClientResponseReader[PageResourceRoleResource]): Future[PageResourceRoleResource] = {
    // create path and map variables
    val path = (addFmt("/auth/roles"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    filterName match {
      case Some(param) => queryParams += "filter_name" -> param.toString
      case _ => queryParams
    }
    filterRole match {
      case Some(param) => queryParams += "filter_role" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserRoles(userId: Integer)(implicit reader: ClientResponseReader[List[RoleResource]]): Future[List[RoleResource]] = {
    // create path and map variables
    val path = (addFmt("/auth/users/{user_id}/roles")
      replaceAll ("\\{" + "user_id" + "\\}",userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def setClientRoles(clientKey: String,
    rolesList: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[ClientResource], writer: RequestWriter[List[String]]): Future[ClientResource] = {
    // create path and map variables
    val path = (addFmt("/auth/clients/{client_key}/roles")
      replaceAll ("\\{" + "client_key" + "\\}",clientKey.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (clientKey == null) throw new Exception("Missing required parameter 'clientKey' when calling AuthRolesApi->setClientRoles")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(rolesList))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def setPermissionsForRole(role: String,
    permissionsList: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[RoleResource], writer: RequestWriter[List[String]]): Future[RoleResource] = {
    // create path and map variables
    val path = (addFmt("/auth/roles/{role}/permissions")
      replaceAll ("\\{" + "role" + "\\}",role.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (role == null) throw new Exception("Missing required parameter 'role' when calling AuthRolesApi->setPermissionsForRole")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(permissionsList))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def setUserRoles(userId: Integer,
    rolesList: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[UserResource], writer: RequestWriter[List[String]]): Future[UserResource] = {
    // create path and map variables
    val path = (addFmt("/auth/users/{user_id}/roles")
      replaceAll ("\\{" + "user_id" + "\\}",userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(rolesList))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateRole(role: String,
    roleResource: Option[RoleResource] = None
    )(implicit reader: ClientResponseReader[RoleResource], writer: RequestWriter[RoleResource]): Future[RoleResource] = {
    // create path and map variables
    val path = (addFmt("/auth/roles/{role}")
      replaceAll ("\\{" + "role" + "\\}",role.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (role == null) throw new Exception("Missing required parameter 'role' when calling AuthRolesApi->updateRole")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(roleResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
