/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.PageResourceUserRelationshipResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.UserRelationshipResource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class UsersRelationshipsApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UsersRelationshipsApiAsyncHelper(client, config)

  /**
   * Create a user relationship
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_ADMIN
   * @param relationship The new relationship (optional)
   * @return UserRelationshipResource
   */
  def createUserRelationship(relationship: Option[UserRelationshipResource] = None): Option[UserRelationshipResource] = {
    val await = Try(Await.result(createUserRelationshipAsync(relationship), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a user relationship asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_ADMIN
   * @param relationship The new relationship (optional)
   * @return Future(UserRelationshipResource)
  */
  def createUserRelationshipAsync(relationship: Option[UserRelationshipResource] = None): Future[UserRelationshipResource] = {
      helper.createUserRelationship(relationship)
  }


  /**
   * Delete a user relationship
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_ADMIN
   * @param id The id of the relationship 
   * @return void
   */
  def deleteUserRelationship(id: Long) = {
    val await = Try(Await.result(deleteUserRelationshipAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a user relationship asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_ADMIN
   * @param id The id of the relationship 
   * @return Future(void)
  */
  def deleteUserRelationshipAsync(id: Long) = {
      helper.deleteUserRelationship(id)
  }


  /**
   * Get a user relationship
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_USER or RELATIONSHIPS_ADMIN
   * @param id The id of the relationship 
   * @return UserRelationshipResource
   */
  def getUserRelationship(id: Long): Option[UserRelationshipResource] = {
    val await = Try(Await.result(getUserRelationshipAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a user relationship asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_USER or RELATIONSHIPS_ADMIN
   * @param id The id of the relationship 
   * @return Future(UserRelationshipResource)
  */
  def getUserRelationshipAsync(id: Long): Future[UserRelationshipResource] = {
      helper.getUserRelationship(id)
  }


  /**
   * Get a list of user relationships
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_USER or RELATIONSHIPS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return PageResourceUserRelationshipResource
   */
  def getUserRelationships(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Option[PageResourceUserRelationshipResource] = {
    val await = Try(Await.result(getUserRelationshipsAsync(size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of user relationships asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_USER or RELATIONSHIPS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
   * @return Future(PageResourceUserRelationshipResource)
  */
  def getUserRelationshipsAsync(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] = None): Future[PageResourceUserRelationshipResource] = {
      helper.getUserRelationships(size, page, order)
  }


  /**
   * Update a user relationship
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_ADMIN
   * @param id The id of the relationship 
   * @param relationship The new relationship (optional)
   * @return UserRelationshipResource
   */
  def updateUserRelationship(id: Long, relationship: Option[UserRelationshipResource] = None): Option[UserRelationshipResource] = {
    val await = Try(Await.result(updateUserRelationshipAsync(id, relationship), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a user relationship asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; RELATIONSHIPS_ADMIN
   * @param id The id of the relationship 
   * @param relationship The new relationship (optional)
   * @return Future(UserRelationshipResource)
  */
  def updateUserRelationshipAsync(id: Long, relationship: Option[UserRelationshipResource] = None): Future[UserRelationshipResource] = {
      helper.updateUserRelationship(id, relationship)
  }


}

class UsersRelationshipsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createUserRelationship(relationship: Option[UserRelationshipResource] = None
    )(implicit reader: ClientResponseReader[UserRelationshipResource], writer: RequestWriter[UserRelationshipResource]): Future[UserRelationshipResource] = {
    // create path and map variables
    val path = (addFmt("/users/relationships"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(relationship))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteUserRelationship(id: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/users/relationships/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserRelationship(id: Long)(implicit reader: ClientResponseReader[UserRelationshipResource]): Future[UserRelationshipResource] = {
    // create path and map variables
    val path = (addFmt("/users/relationships/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserRelationships(size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = None
    )(implicit reader: ClientResponseReader[PageResourceUserRelationshipResource]): Future[PageResourceUserRelationshipResource] = {
    // create path and map variables
    val path = (addFmt("/users/relationships"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateUserRelationship(id: Long,
    relationship: Option[UserRelationshipResource] = None
    )(implicit reader: ClientResponseReader[UserRelationshipResource], writer: RequestWriter[UserRelationshipResource]): Future[UserRelationshipResource] = {
    // create path and map variables
    val path = (addFmt("/users/relationships/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(relationship))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
