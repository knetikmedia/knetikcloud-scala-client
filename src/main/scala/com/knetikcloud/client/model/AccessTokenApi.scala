/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.OAuth2Resource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class AccessTokenApi(val defBasePath: String = "https://devsandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AccessTokenApiAsyncHelper(client, config)

  /**
   * Get access token
   * 
   * @param grantType Grant type 
   * @param clientId The id of the client 
   * @param clientSecret The secret key of the client.  Used only with a grant_type of client_credentials (optional)
   * @param username The username of the client. Used only with a grant_type of password (optional)
   * @param password The password of the client. Used only with a grant_type of password (optional)
   * @param token The 3rd party authentication token. Used only with a grant_type of facebook, google, etc (social plugins) (optional)
   * @param refreshToken The refresh token obtained during prior authentication. Used only with a grant_type of refresh_token (optional)
   * @return OAuth2Resource
   */
  def getOAuthToken(grantType: String /* = client_credentials*/, clientId: String /* = knetik*/, clientSecret: Option[String] = None, username: Option[String] = None, password: Option[String] = None, token: Option[String] = None, refreshToken: Option[String] = None): Option[OAuth2Resource] = {
    val await = Try(Await.result(getOAuthTokenAsync(grantType, clientId, clientSecret, username, password, token, refreshToken), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get access token asynchronously
   * 
   * @param grantType Grant type 
   * @param clientId The id of the client 
   * @param clientSecret The secret key of the client.  Used only with a grant_type of client_credentials (optional)
   * @param username The username of the client. Used only with a grant_type of password (optional)
   * @param password The password of the client. Used only with a grant_type of password (optional)
   * @param token The 3rd party authentication token. Used only with a grant_type of facebook, google, etc (social plugins) (optional)
   * @param refreshToken The refresh token obtained during prior authentication. Used only with a grant_type of refresh_token (optional)
   * @return Future(OAuth2Resource)
  */
  def getOAuthTokenAsync(grantType: String /* = client_credentials*/, clientId: String /* = knetik*/, clientSecret: Option[String] = None, username: Option[String] = None, password: Option[String] = None, token: Option[String] = None, refreshToken: Option[String] = None): Future[OAuth2Resource] = {
      helper.getOAuthToken(grantType, clientId, clientSecret, username, password, token, refreshToken)
  }


}

class AccessTokenApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getOAuthToken(grantType: String = client_credentials,
    clientId: String = knetik,
    clientSecret: Option[String] = None,
    username: Option[String] = None,
    password: Option[String] = None,
    token: Option[String] = None,
    refreshToken: Option[String] = None
    )(implicit reader: ClientResponseReader[OAuth2Resource]): Future[OAuth2Resource] = {
    // create path and map variables
    val path = (addFmt("/oauth/token"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (grantType == null) throw new Exception("Missing required parameter 'grantType' when calling AccessTokenApi->getOAuthToken")

    if (clientId == null) throw new Exception("Missing required parameter 'clientId' when calling AccessTokenApi->getOAuthToken")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
