/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.ExpressionResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.StringWrapper
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class BRERuleEngineExpressionsApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new BRERuleEngineExpressionsApiAsyncHelper(client, config)

  /**
   * Lookup a specific expression
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_EXPRESSIONS_USER
   * @param _type Specifiy the type of expression as returned by the listing endpoint 
   * @return ExpressionResource
   */
  def getBREExpression(_type: String): Option[ExpressionResource] = {
    val await = Try(Await.result(getBREExpressionAsync(_type), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Lookup a specific expression asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_EXPRESSIONS_USER
   * @param _type Specifiy the type of expression as returned by the listing endpoint 
   * @return Future(ExpressionResource)
  */
  def getBREExpressionAsync(_type: String): Future[ExpressionResource] = {
      helper.getBREExpression(_type)
  }


  /**
   * Get a list of supported expressions to use in conditions or actions
   * Each resource contains a type and a definition that are read-only, all the other fields must be provided when using the expression in a rule. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_EXPRESSIONS_USER
   * @param filterTypeGroup Filter for expressions by type group (optional)
   * @return List[ExpressionResource]
   */
  def getBREExpressions(filterTypeGroup: Option[String] = None): Option[List[ExpressionResource]] = {
    val await = Try(Await.result(getBREExpressionsAsync(filterTypeGroup), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of supported expressions to use in conditions or actions asynchronously
   * Each resource contains a type and a definition that are read-only, all the other fields must be provided when using the expression in a rule. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_EXPRESSIONS_USER
   * @param filterTypeGroup Filter for expressions by type group (optional)
   * @return Future(List[ExpressionResource])
  */
  def getBREExpressionsAsync(filterTypeGroup: Option[String] = None): Future[List[ExpressionResource]] = {
      helper.getBREExpressions(filterTypeGroup)
  }


  /**
   * Returns the textual representation of an expression
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_EXPRESSIONS_USER
   * @param expression The expression resource to be converted (optional)
   * @return StringWrapper
   */
  def getExpressionAsText(expression: Option[ExpressionResource] = None): Option[StringWrapper] = {
    val await = Try(Await.result(getExpressionAsTextAsync(expression), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Returns the textual representation of an expression asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; BRE_RULE_ENGINE_EXPRESSIONS_USER
   * @param expression The expression resource to be converted (optional)
   * @return Future(StringWrapper)
  */
  def getExpressionAsTextAsync(expression: Option[ExpressionResource] = None): Future[StringWrapper] = {
      helper.getExpressionAsText(expression)
  }


}

class BRERuleEngineExpressionsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getBREExpression(_type: String)(implicit reader: ClientResponseReader[ExpressionResource]): Future[ExpressionResource] = {
    // create path and map variables
    val path = (addFmt("/bre/expressions/{type}")
      replaceAll ("\\{" + "type" + "\\}",_type.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (_type == null) throw new Exception("Missing required parameter '_type' when calling BRERuleEngineExpressionsApi->getBREExpression")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBREExpressions(filterTypeGroup: Option[String] = None
    )(implicit reader: ClientResponseReader[List[ExpressionResource]]): Future[List[ExpressionResource]] = {
    // create path and map variables
    val path = (addFmt("/bre/expressions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    filterTypeGroup match {
      case Some(param) => queryParams += "filter_type_group" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getExpressionAsText(expression: Option[ExpressionResource] = None
    )(implicit reader: ClientResponseReader[StringWrapper], writer: RequestWriter[ExpressionResource]): Future[StringWrapper] = {
    // create path and map variables
    val path = (addFmt("/bre/expressions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(expression))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
