/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.BreGlobalResource
import com.knetikcloud.client.model.PageResourceBreGlobalResource
import com.knetikcloud.client.model.Result
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class BRERuleEngineGlobalsApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new BRERuleEngineGlobalsApiAsyncHelper(client, config)

  /**
   * Create a global definition
   * Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.
   * @param breGlobalResource The BRE global resource object (optional)
   * @return BreGlobalResource
   */
  def createBREGlobal(breGlobalResource: Option[BreGlobalResource] = None): Option[BreGlobalResource] = {
    val await = Try(Await.result(createBREGlobalAsync(breGlobalResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a global definition asynchronously
   * Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.
   * @param breGlobalResource The BRE global resource object (optional)
   * @return Future(BreGlobalResource)
  */
  def createBREGlobalAsync(breGlobalResource: Option[BreGlobalResource] = None): Future[BreGlobalResource] = {
      helper.createBREGlobal(breGlobalResource)
  }


  /**
   * Delete a global
   * May fail if there are existing rules against it. Cannot delete core globals
   * @param id The id of the global definition 
   * @return void
   */
  def deleteBREGlobal(id: String) = {
    val await = Try(Await.result(deleteBREGlobalAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a global asynchronously
   * May fail if there are existing rules against it. Cannot delete core globals
   * @param id The id of the global definition 
   * @return Future(void)
  */
  def deleteBREGlobalAsync(id: String) = {
      helper.deleteBREGlobal(id)
  }


  /**
   * Get a single global definition
   * 
   * @param id The id of the global definition 
   * @return BreGlobalResource
   */
  def getBREGlobal(id: String): Option[BreGlobalResource] = {
    val await = Try(Await.result(getBREGlobalAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single global definition asynchronously
   * 
   * @param id The id of the global definition 
   * @return Future(BreGlobalResource)
  */
  def getBREGlobalAsync(id: String): Future[BreGlobalResource] = {
      helper.getBREGlobal(id)
  }


  /**
   * List global definitions
   * 
   * @param filterSystem Filter for globals that are system globals when true, or not when false. Leave off for both mixed (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return PageResourceBreGlobalResource
   */
  def getBREGlobals(filterSystem: Option[Boolean] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Option[PageResourceBreGlobalResource] = {
    val await = Try(Await.result(getBREGlobalsAsync(filterSystem, size, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List global definitions asynchronously
   * 
   * @param filterSystem Filter for globals that are system globals when true, or not when false. Leave off for both mixed (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @return Future(PageResourceBreGlobalResource)
  */
  def getBREGlobalsAsync(filterSystem: Option[Boolean] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/): Future[PageResourceBreGlobalResource] = {
      helper.getBREGlobals(filterSystem, size, page)
  }


  /**
   * Update a global definition
   * May fail if new parameters mismatch requirements of existing rules. Cannot update core globals
   * @param id The id of the global definition 
   * @param breGlobalResource The BRE global resource object (optional)
   * @return BreGlobalResource
   */
  def updateBREGlobal(id: String, breGlobalResource: Option[BreGlobalResource] = None): Option[BreGlobalResource] = {
    val await = Try(Await.result(updateBREGlobalAsync(id, breGlobalResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a global definition asynchronously
   * May fail if new parameters mismatch requirements of existing rules. Cannot update core globals
   * @param id The id of the global definition 
   * @param breGlobalResource The BRE global resource object (optional)
   * @return Future(BreGlobalResource)
  */
  def updateBREGlobalAsync(id: String, breGlobalResource: Option[BreGlobalResource] = None): Future[BreGlobalResource] = {
      helper.updateBREGlobal(id, breGlobalResource)
  }


}

class BRERuleEngineGlobalsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createBREGlobal(breGlobalResource: Option[BreGlobalResource] = None
    )(implicit reader: ClientResponseReader[BreGlobalResource], writer: RequestWriter[BreGlobalResource]): Future[BreGlobalResource] = {
    // create path and map variables
    val path = (addFmt("/bre/globals/definitions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(breGlobalResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteBREGlobal(id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/bre/globals/definitions/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling BRERuleEngineGlobalsApi->deleteBREGlobal")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBREGlobal(id: String)(implicit reader: ClientResponseReader[BreGlobalResource]): Future[BreGlobalResource] = {
    // create path and map variables
    val path = (addFmt("/bre/globals/definitions/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling BRERuleEngineGlobalsApi->getBREGlobal")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBREGlobals(filterSystem: Option[Boolean] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1)
    )(implicit reader: ClientResponseReader[PageResourceBreGlobalResource]): Future[PageResourceBreGlobalResource] = {
    // create path and map variables
    val path = (addFmt("/bre/globals/definitions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    filterSystem match {
      case Some(param) => queryParams += "filter_system" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateBREGlobal(id: String,
    breGlobalResource: Option[BreGlobalResource] = None
    )(implicit reader: ClientResponseReader[BreGlobalResource], writer: RequestWriter[BreGlobalResource]): Future[BreGlobalResource] = {
    // create path and map variables
    val path = (addFmt("/bre/globals/definitions/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling BRERuleEngineGlobalsApi->updateBREGlobal")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(breGlobalResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
