/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.PageResourcePollResource
import com.knetikcloud.client.model.PageResourceTemplateResource
import com.knetikcloud.client.model.PollResource
import com.knetikcloud.client.model.PollResponseResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.StringWrapper
import com.knetikcloud.client.model.TemplateResource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class ContentPollsApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ContentPollsApiAsyncHelper(client, config)

  /**
   * Add your vote to a poll
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN or POLLS_USER
   * @param id The poll id 
   * @param answerKey The answer key (optional)
   * @return PollResponseResource
   */
  def answerPoll(id: String, answerKey: Option[StringWrapper] = None): Option[PollResponseResource] = {
    val await = Try(Await.result(answerPollAsync(id, answerKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add your vote to a poll asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN or POLLS_USER
   * @param id The poll id 
   * @param answerKey The answer key (optional)
   * @return Future(PollResponseResource)
  */
  def answerPollAsync(id: String, answerKey: Option[StringWrapper] = None): Future[PollResponseResource] = {
      helper.answerPoll(id, answerKey)
  }


  /**
   * Create a new poll
   * Polls are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN
   * @param pollResource The poll object (optional)
   * @return PollResource
   */
  def createPoll(pollResource: Option[PollResource] = None): Option[PollResource] = {
    val await = Try(Await.result(createPollAsync(pollResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a new poll asynchronously
   * Polls are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN
   * @param pollResource The poll object (optional)
   * @return Future(PollResource)
  */
  def createPollAsync(pollResource: Option[PollResource] = None): Future[PollResource] = {
      helper.createPoll(pollResource)
  }


  /**
   * Create a poll template
   * Poll templates define a type of poll and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param pollTemplateResource The poll template resource object (optional)
   * @return TemplateResource
   */
  def createPollTemplate(pollTemplateResource: Option[TemplateResource] = None): Option[TemplateResource] = {
    val await = Try(Await.result(createPollTemplateAsync(pollTemplateResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a poll template asynchronously
   * Poll templates define a type of poll and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param pollTemplateResource The poll template resource object (optional)
   * @return Future(TemplateResource)
  */
  def createPollTemplateAsync(pollTemplateResource: Option[TemplateResource] = None): Future[TemplateResource] = {
      helper.createPollTemplate(pollTemplateResource)
  }


  /**
   * Delete an existing poll
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN
   * @param id The poll id 
   * @return void
   */
  def deletePoll(id: String) = {
    val await = Try(Await.result(deletePollAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete an existing poll asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN
   * @param id The poll id 
   * @return Future(void)
  */
  def deletePollAsync(id: String) = {
      helper.deletePoll(id)
  }


  /**
   * Delete a poll template
   * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param cascade The value needed to delete used templates (optional)
   * @return void
   */
  def deletePollTemplate(id: String, cascade: Option[String] = None) = {
    val await = Try(Await.result(deletePollTemplateAsync(id, cascade), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a poll template asynchronously
   * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param cascade The value needed to delete used templates (optional)
   * @return Future(void)
  */
  def deletePollTemplateAsync(id: String, cascade: Option[String] = None) = {
      helper.deletePollTemplate(id, cascade)
  }


  /**
   * Get a single poll
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param id The poll id 
   * @return PollResource
   */
  def getPoll(id: String): Option[PollResource] = {
    val await = Try(Await.result(getPollAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single poll asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param id The poll id 
   * @return Future(PollResource)
  */
  def getPollAsync(id: String): Future[PollResource] = {
      helper.getPoll(id)
  }


  /**
   * Get poll answer
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN or POLLS_USER
   * @param id The poll id 
   * @return PollResponseResource
   */
  def getPollAnswer(id: String): Option[PollResponseResource] = {
    val await = Try(Await.result(getPollAnswerAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get poll answer asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN or POLLS_USER
   * @param id The poll id 
   * @return Future(PollResponseResource)
  */
  def getPollAnswerAsync(id: String): Future[PollResponseResource] = {
      helper.getPollAnswer(id)
  }


  /**
   * Get a single poll template
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or POLLS_ADMIN
   * @param id The id of the template 
   * @return TemplateResource
   */
  def getPollTemplate(id: String): Option[TemplateResource] = {
    val await = Try(Await.result(getPollTemplateAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single poll template asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or POLLS_ADMIN
   * @param id The id of the template 
   * @return Future(TemplateResource)
  */
  def getPollTemplateAsync(id: String): Future[TemplateResource] = {
      helper.getPollTemplate(id)
  }


  /**
   * List and search poll templates
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or POLLS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceTemplateResource
   */
  def getPollTemplates(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceTemplateResource] = {
    val await = Try(Await.result(getPollTemplatesAsync(size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search poll templates asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or POLLS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceTemplateResource)
  */
  def getPollTemplatesAsync(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceTemplateResource] = {
      helper.getPollTemplates(size, page, order)
  }


  /**
   * List and search polls
   * Get a list of polls with optional filtering. Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param filterCategory Filter for polls from a specific category by id (optional)
   * @param filterTagset Filter for polls with specified tags (separated by comma) (optional)
   * @param filterText Filter for polls whose text contains a string (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourcePollResource
   */
  def getPolls(filterCategory: Option[String] = None, filterTagset: Option[String] = None, filterText: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourcePollResource] = {
    val await = Try(Await.result(getPollsAsync(filterCategory, filterTagset, filterText, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search polls asynchronously
   * Get a list of polls with optional filtering. Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param filterCategory Filter for polls from a specific category by id (optional)
   * @param filterTagset Filter for polls with specified tags (separated by comma) (optional)
   * @param filterText Filter for polls whose text contains a string (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourcePollResource)
  */
  def getPollsAsync(filterCategory: Option[String] = None, filterTagset: Option[String] = None, filterText: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourcePollResource] = {
      helper.getPolls(filterCategory, filterTagset, filterText, size, page, order)
  }


  /**
   * Update an existing poll
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN
   * @param id The poll id 
   * @param pollResource The poll object (optional)
   * @return PollResource
   */
  def updatePoll(id: String, pollResource: Option[PollResource] = None): Option[PollResource] = {
    val await = Try(Await.result(updatePollAsync(id, pollResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update an existing poll asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; POLLS_ADMIN
   * @param id The poll id 
   * @param pollResource The poll object (optional)
   * @return Future(PollResource)
  */
  def updatePollAsync(id: String, pollResource: Option[PollResource] = None): Future[PollResource] = {
      helper.updatePoll(id, pollResource)
  }


  /**
   * Update a poll template
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param pollTemplateResource The poll template resource object (optional)
   * @return TemplateResource
   */
  def updatePollTemplate(id: String, pollTemplateResource: Option[TemplateResource] = None): Option[TemplateResource] = {
    val await = Try(Await.result(updatePollTemplateAsync(id, pollTemplateResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a poll template asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param pollTemplateResource The poll template resource object (optional)
   * @return Future(TemplateResource)
  */
  def updatePollTemplateAsync(id: String, pollTemplateResource: Option[TemplateResource] = None): Future[TemplateResource] = {
      helper.updatePollTemplate(id, pollTemplateResource)
  }


}

class ContentPollsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def answerPoll(id: String,
    answerKey: Option[StringWrapper] = None
    )(implicit reader: ClientResponseReader[PollResponseResource], writer: RequestWriter[StringWrapper]): Future[PollResponseResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/{id}/response")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->answerPoll")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(answerKey))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createPoll(pollResource: Option[PollResource] = None
    )(implicit reader: ClientResponseReader[PollResource], writer: RequestWriter[PollResource]): Future[PollResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(pollResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createPollTemplate(pollTemplateResource: Option[TemplateResource] = None
    )(implicit reader: ClientResponseReader[TemplateResource], writer: RequestWriter[TemplateResource]): Future[TemplateResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/templates"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(pollTemplateResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deletePoll(id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/media/polls/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->deletePoll")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deletePollTemplate(id: String,
    cascade: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/media/polls/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->deletePollTemplate")

    cascade match {
      case Some(param) => queryParams += "cascade" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getPoll(id: String)(implicit reader: ClientResponseReader[PollResource]): Future[PollResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->getPoll")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getPollAnswer(id: String)(implicit reader: ClientResponseReader[PollResponseResource]): Future[PollResponseResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/{id}/response")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->getPollAnswer")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getPollTemplate(id: String)(implicit reader: ClientResponseReader[TemplateResource]): Future[TemplateResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->getPollTemplate")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getPollTemplates(size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceTemplateResource]): Future[PageResourceTemplateResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/templates"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getPolls(filterCategory: Option[String] = None,
    filterTagset: Option[String] = None,
    filterText: Option[String] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourcePollResource]): Future[PageResourcePollResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    filterCategory match {
      case Some(param) => queryParams += "filter_category" -> param.toString
      case _ => queryParams
    }
    filterTagset match {
      case Some(param) => queryParams += "filter_tagset" -> param.toString
      case _ => queryParams
    }
    filterText match {
      case Some(param) => queryParams += "filter_text" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updatePoll(id: String,
    pollResource: Option[PollResource] = None
    )(implicit reader: ClientResponseReader[PollResource], writer: RequestWriter[PollResource]): Future[PollResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->updatePoll")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(pollResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updatePollTemplate(id: String,
    pollTemplateResource: Option[TemplateResource] = None
    )(implicit reader: ClientResponseReader[TemplateResource], writer: RequestWriter[TemplateResource]): Future[TemplateResource] = {
    // create path and map variables
    val path = (addFmt("/media/polls/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentPollsApi->updatePollTemplate")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(pollTemplateResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
