/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.CouponItem
import com.knetikcloud.client.model.ItemTemplateResource
import com.knetikcloud.client.model.PageResourceItemTemplateResource
import com.knetikcloud.client.model.Result
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class StoreCouponsApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new StoreCouponsApiAsyncHelper(client, config)

  /**
   * Create a coupon item
   * SKUs have to be unique in the entire store. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
   * @param couponItem The coupon item object (optional)
   * @return CouponItem
   */
  def createCouponItem(cascade: Option[Boolean] /* = false*/, couponItem: Option[CouponItem] = None): Option[CouponItem] = {
    val await = Try(Await.result(createCouponItemAsync(cascade, couponItem), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a coupon item asynchronously
   * SKUs have to be unique in the entire store. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
   * @param couponItem The coupon item object (optional)
   * @return Future(CouponItem)
  */
  def createCouponItemAsync(cascade: Option[Boolean] /* = false*/, couponItem: Option[CouponItem] = None): Future[CouponItem] = {
      helper.createCouponItem(cascade, couponItem)
  }


  /**
   * Create a coupon template
   * Coupon Templates define a type of coupon and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param couponTemplateResource The new coupon template (optional)
   * @return ItemTemplateResource
   */
  def createCouponTemplate(couponTemplateResource: Option[ItemTemplateResource] = None): Option[ItemTemplateResource] = {
    val await = Try(Await.result(createCouponTemplateAsync(couponTemplateResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a coupon template asynchronously
   * Coupon Templates define a type of coupon and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param couponTemplateResource The new coupon template (optional)
   * @return Future(ItemTemplateResource)
  */
  def createCouponTemplateAsync(couponTemplateResource: Option[ItemTemplateResource] = None): Future[ItemTemplateResource] = {
      helper.createCouponTemplate(couponTemplateResource)
  }


  /**
   * Delete a coupon item
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param id The id of the coupon 
   * @return void
   */
  def deleteCouponItem(id: Integer) = {
    val await = Try(Await.result(deleteCouponItemAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a coupon item asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param id The id of the coupon 
   * @return Future(void)
  */
  def deleteCouponItemAsync(id: Integer) = {
      helper.deleteCouponItem(id)
  }


  /**
   * Delete a coupon template
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param cascade force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
   * @return void
   */
  def deleteCouponTemplate(id: String, cascade: Option[String] = None) = {
    val await = Try(Await.result(deleteCouponTemplateAsync(id, cascade), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a coupon template asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param cascade force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
   * @return Future(void)
  */
  def deleteCouponTemplateAsync(id: String, cascade: Option[String] = None) = {
      helper.deleteCouponTemplate(id, cascade)
  }


  /**
   * Get a single coupon item
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param id The id of the coupon 
   * @return CouponItem
   */
  def getCouponItem(id: Integer): Option[CouponItem] = {
    val await = Try(Await.result(getCouponItemAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single coupon item asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param id The id of the coupon 
   * @return Future(CouponItem)
  */
  def getCouponItemAsync(id: Integer): Future[CouponItem] = {
      helper.getCouponItem(id)
  }


  /**
   * Get a coupon by sku
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param sku A sku of the coupon 
   * @return CouponItem
   */
  def getCouponItemBySku(sku: String): Option[CouponItem] = {
    val await = Try(Await.result(getCouponItemBySkuAsync(sku), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a coupon by sku asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param sku A sku of the coupon 
   * @return Future(CouponItem)
  */
  def getCouponItemBySkuAsync(sku: String): Future[CouponItem] = {
      helper.getCouponItemBySku(sku)
  }


  /**
   * Get a single coupon template
   * Coupon Templates define a type of coupon and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or COUPONS_ADMIN
   * @param id The id of the template 
   * @return ItemTemplateResource
   */
  def getCouponTemplate(id: String): Option[ItemTemplateResource] = {
    val await = Try(Await.result(getCouponTemplateAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single coupon template asynchronously
   * Coupon Templates define a type of coupon and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or COUPONS_ADMIN
   * @param id The id of the template 
   * @return Future(ItemTemplateResource)
  */
  def getCouponTemplateAsync(id: String): Future[ItemTemplateResource] = {
      helper.getCouponTemplate(id)
  }


  /**
   * List and search coupon templates
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or COUPONS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceItemTemplateResource
   */
  def getCouponTemplates(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceItemTemplateResource] = {
    val await = Try(Await.result(getCouponTemplatesAsync(size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search coupon templates asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or COUPONS_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceItemTemplateResource)
  */
  def getCouponTemplatesAsync(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceItemTemplateResource] = {
      helper.getCouponTemplates(size, page, order)
  }


  /**
   * Update a coupon item
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param id The id of the coupon 
   * @param cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
   * @param couponItem The coupon item object (optional)
   * @return CouponItem
   */
  def updateCouponItem(id: Integer, cascade: Option[Boolean] /* = false*/, couponItem: Option[CouponItem] = None): Option[CouponItem] = {
    val await = Try(Await.result(updateCouponItemAsync(id, cascade, couponItem), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a coupon item asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; COUPONS_ADMIN
   * @param id The id of the coupon 
   * @param cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
   * @param couponItem The coupon item object (optional)
   * @return Future(CouponItem)
  */
  def updateCouponItemAsync(id: Integer, cascade: Option[Boolean] /* = false*/, couponItem: Option[CouponItem] = None): Future[CouponItem] = {
      helper.updateCouponItem(id, cascade, couponItem)
  }


  /**
   * Update a coupon template
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param couponTemplateResource The coupon template resource object (optional)
   * @return ItemTemplateResource
   */
  def updateCouponTemplate(id: String, couponTemplateResource: Option[ItemTemplateResource] = None): Option[ItemTemplateResource] = {
    val await = Try(Await.result(updateCouponTemplateAsync(id, couponTemplateResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a coupon template asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param couponTemplateResource The coupon template resource object (optional)
   * @return Future(ItemTemplateResource)
  */
  def updateCouponTemplateAsync(id: String, couponTemplateResource: Option[ItemTemplateResource] = None): Future[ItemTemplateResource] = {
      helper.updateCouponTemplate(id, couponTemplateResource)
  }


}

class StoreCouponsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createCouponItem(cascade: Option[Boolean] = Some(false),
    couponItem: Option[CouponItem] = None
    )(implicit reader: ClientResponseReader[CouponItem], writer: RequestWriter[CouponItem]): Future[CouponItem] = {
    // create path and map variables
    val path = (addFmt("/store/coupons"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    cascade match {
      case Some(param) => queryParams += "cascade" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(couponItem))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createCouponTemplate(couponTemplateResource: Option[ItemTemplateResource] = None
    )(implicit reader: ClientResponseReader[ItemTemplateResource], writer: RequestWriter[ItemTemplateResource]): Future[ItemTemplateResource] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/templates"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(couponTemplateResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteCouponItem(id: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteCouponTemplate(id: String,
    cascade: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling StoreCouponsApi->deleteCouponTemplate")

    cascade match {
      case Some(param) => queryParams += "cascade" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCouponItem(id: Integer)(implicit reader: ClientResponseReader[CouponItem]): Future[CouponItem] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCouponItemBySku(sku: String)(implicit reader: ClientResponseReader[CouponItem]): Future[CouponItem] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/skus/{sku}")
      replaceAll ("\\{" + "sku" + "\\}",sku.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sku == null) throw new Exception("Missing required parameter 'sku' when calling StoreCouponsApi->getCouponItemBySku")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCouponTemplate(id: String)(implicit reader: ClientResponseReader[ItemTemplateResource]): Future[ItemTemplateResource] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling StoreCouponsApi->getCouponTemplate")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCouponTemplates(size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceItemTemplateResource]): Future[PageResourceItemTemplateResource] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/templates"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateCouponItem(id: Integer,
    cascade: Option[Boolean] = Some(false),
    couponItem: Option[CouponItem] = None
    )(implicit reader: ClientResponseReader[CouponItem], writer: RequestWriter[CouponItem]): Future[CouponItem] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    cascade match {
      case Some(param) => queryParams += "cascade" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(couponItem))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateCouponTemplate(id: String,
    couponTemplateResource: Option[ItemTemplateResource] = None
    )(implicit reader: ClientResponseReader[ItemTemplateResource], writer: RequestWriter[ItemTemplateResource]): Future[ItemTemplateResource] = {
    // create path and map variables
    val path = (addFmt("/store/coupons/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling StoreCouponsApi->updateCouponTemplate")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(couponTemplateResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
