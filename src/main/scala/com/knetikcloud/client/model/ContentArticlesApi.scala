/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.client.model

import java.text.SimpleDateFormat

import com.knetikcloud.client.model.ArticleResource
import com.knetikcloud.client.model.PageResourceArticleResource
import com.knetikcloud.client.model.PageResourceTemplateResource
import com.knetikcloud.client.model.Result
import com.knetikcloud.client.model.TemplateResource
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class ContentArticlesApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ContentArticlesApiAsyncHelper(client, config)

  /**
   * Create a new article
   * Articles are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end.&lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions:&lt;/b&gt; ARTICLES_ADMIN
   * @param articleResource The new article (optional)
   * @return ArticleResource
   */
  def createArticle(articleResource: Option[ArticleResource] = None): Option[ArticleResource] = {
    val await = Try(Await.result(createArticleAsync(articleResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a new article asynchronously
   * Articles are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end.&lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions:&lt;/b&gt; ARTICLES_ADMIN
   * @param articleResource The new article (optional)
   * @return Future(ArticleResource)
  */
  def createArticleAsync(articleResource: Option[ArticleResource] = None): Future[ArticleResource] = {
      helper.createArticle(articleResource)
  }


  /**
   * Create an article template
   * Article Templates define a type of article and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param articleTemplateResource The article template resource object (optional)
   * @return TemplateResource
   */
  def createArticleTemplate(articleTemplateResource: Option[TemplateResource] = None): Option[TemplateResource] = {
    val await = Try(Await.result(createArticleTemplateAsync(articleTemplateResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create an article template asynchronously
   * Article Templates define a type of article and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param articleTemplateResource The article template resource object (optional)
   * @return Future(TemplateResource)
  */
  def createArticleTemplateAsync(articleTemplateResource: Option[TemplateResource] = None): Future[TemplateResource] = {
      helper.createArticleTemplate(articleTemplateResource)
  }


  /**
   * Delete an existing article
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTICLES_ADMIN
   * @param id The article id 
   * @return void
   */
  def deleteArticle(id: String) = {
    val await = Try(Await.result(deleteArticleAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete an existing article asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTICLES_ADMIN
   * @param id The article id 
   * @return Future(void)
  */
  def deleteArticleAsync(id: String) = {
      helper.deleteArticle(id)
  }


  /**
   * Delete an article template
   * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param cascade The value needed to delete used templates (optional)
   * @return void
   */
  def deleteArticleTemplate(id: String, cascade: Option[String] = None) = {
    val await = Try(Await.result(deleteArticleTemplateAsync(id, cascade), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete an article template asynchronously
   * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param cascade The value needed to delete used templates (optional)
   * @return Future(void)
  */
  def deleteArticleTemplateAsync(id: String, cascade: Option[String] = None) = {
      helper.deleteArticleTemplate(id, cascade)
  }


  /**
   * Get a single article
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param id The article id 
   * @return ArticleResource
   */
  def getArticle(id: String): Option[ArticleResource] = {
    val await = Try(Await.result(getArticleAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single article asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param id The article id 
   * @return Future(ArticleResource)
  */
  def getArticleAsync(id: String): Future[ArticleResource] = {
      helper.getArticle(id)
  }


  /**
   * Get a single article template
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTICLES_ADMIN
   * @param id The id of the template 
   * @return TemplateResource
   */
  def getArticleTemplate(id: String): Option[TemplateResource] = {
    val await = Try(Await.result(getArticleTemplateAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a single article template asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTICLES_ADMIN
   * @param id The id of the template 
   * @return Future(TemplateResource)
  */
  def getArticleTemplateAsync(id: String): Future[TemplateResource] = {
      helper.getArticleTemplate(id)
  }


  /**
   * List and search article templates
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTICLES_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceTemplateResource
   */
  def getArticleTemplates(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceTemplateResource] = {
    val await = Try(Await.result(getArticleTemplatesAsync(size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search article templates asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTICLES_ADMIN
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceTemplateResource)
  */
  def getArticleTemplatesAsync(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceTemplateResource] = {
      helper.getArticleTemplates(size, page, order)
  }


  /**
   * List and search articles
   * Get a list of articles with optional filtering. Assets will not be filled in on the resources returned. Use &#39;Get a single article&#39; to retrieve the full resource with assets for a given item as needed. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param filterActiveOnly Filter for articles that are active (true) or inactive (false) (optional)
   * @param filterCategory Filter for articles from a specific category by id (optional)
   * @param filterTagset Filter for articles with at least one of a specified set of tags (separated by comma) (optional)
   * @param filterTagIntersection Filter for articles with all of a specified set of tags (separated by comma) (optional)
   * @param filterTagExclusion Filter for articles with none of a specified set of tags (separated by comma) (optional)
   * @param filterTitle Filter for articles whose title contains a string (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return PageResourceArticleResource
   */
  def getArticles(filterActiveOnly: Option[Boolean] = None, filterCategory: Option[String] = None, filterTagset: Option[String] = None, filterTagIntersection: Option[String] = None, filterTagExclusion: Option[String] = None, filterTitle: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Option[PageResourceArticleResource] = {
    val await = Try(Await.result(getArticlesAsync(filterActiveOnly, filterCategory, filterTagset, filterTagIntersection, filterTagExclusion, filterTitle, size, page, order), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List and search articles asynchronously
   * Get a list of articles with optional filtering. Assets will not be filled in on the resources returned. Use &#39;Get a single article&#39; to retrieve the full resource with assets for a given item as needed. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
   * @param filterActiveOnly Filter for articles that are active (true) or inactive (false) (optional)
   * @param filterCategory Filter for articles from a specific category by id (optional)
   * @param filterTagset Filter for articles with at least one of a specified set of tags (separated by comma) (optional)
   * @param filterTagIntersection Filter for articles with all of a specified set of tags (separated by comma) (optional)
   * @param filterTagExclusion Filter for articles with none of a specified set of tags (separated by comma) (optional)
   * @param filterTitle Filter for articles whose title contains a string (optional)
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned, starting with 1 (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
   * @return Future(PageResourceArticleResource)
  */
  def getArticlesAsync(filterActiveOnly: Option[Boolean] = None, filterCategory: Option[String] = None, filterTagset: Option[String] = None, filterTagIntersection: Option[String] = None, filterTagExclusion: Option[String] = None, filterTitle: Option[String] = None, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = id:ASC*/): Future[PageResourceArticleResource] = {
      helper.getArticles(filterActiveOnly, filterCategory, filterTagset, filterTagIntersection, filterTagExclusion, filterTitle, size, page, order)
  }


  /**
   * Update an existing article
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTICLES_ADMIN
   * @param id The article id 
   * @param articleResource The article object (optional)
   * @return ArticleResource
   */
  def updateArticle(id: String, articleResource: Option[ArticleResource] = None): Option[ArticleResource] = {
    val await = Try(Await.result(updateArticleAsync(id, articleResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update an existing article asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTICLES_ADMIN
   * @param id The article id 
   * @param articleResource The article object (optional)
   * @return Future(ArticleResource)
  */
  def updateArticleAsync(id: String, articleResource: Option[ArticleResource] = None): Future[ArticleResource] = {
      helper.updateArticle(id, articleResource)
  }


  /**
   * Update an article template
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param articleTemplateResource The article template resource object (optional)
   * @return TemplateResource
   */
  def updateArticleTemplate(id: String, articleTemplateResource: Option[TemplateResource] = None): Option[TemplateResource] = {
    val await = Try(Await.result(updateArticleTemplateAsync(id, articleTemplateResource), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update an article template asynchronously
   * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
   * @param id The id of the template 
   * @param articleTemplateResource The article template resource object (optional)
   * @return Future(TemplateResource)
  */
  def updateArticleTemplateAsync(id: String, articleTemplateResource: Option[TemplateResource] = None): Future[TemplateResource] = {
      helper.updateArticleTemplate(id, articleTemplateResource)
  }


}

class ContentArticlesApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createArticle(articleResource: Option[ArticleResource] = None
    )(implicit reader: ClientResponseReader[ArticleResource], writer: RequestWriter[ArticleResource]): Future[ArticleResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(articleResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createArticleTemplate(articleTemplateResource: Option[TemplateResource] = None
    )(implicit reader: ClientResponseReader[TemplateResource], writer: RequestWriter[TemplateResource]): Future[TemplateResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles/templates"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(articleTemplateResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteArticle(id: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/content/articles/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentArticlesApi->deleteArticle")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteArticleTemplate(id: String,
    cascade: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/content/articles/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentArticlesApi->deleteArticleTemplate")

    cascade match {
      case Some(param) => queryParams += "cascade" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getArticle(id: String)(implicit reader: ClientResponseReader[ArticleResource]): Future[ArticleResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentArticlesApi->getArticle")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getArticleTemplate(id: String)(implicit reader: ClientResponseReader[TemplateResource]): Future[TemplateResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentArticlesApi->getArticleTemplate")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getArticleTemplates(size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceTemplateResource]): Future[PageResourceTemplateResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles/templates"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getArticles(filterActiveOnly: Option[Boolean] = None,
    filterCategory: Option[String] = None,
    filterTagset: Option[String] = None,
    filterTagIntersection: Option[String] = None,
    filterTagExclusion: Option[String] = None,
    filterTitle: Option[String] = None,
    size: Option[Integer] = Some(25),
    page: Option[Integer] = Some(1),
    order: Option[String] = Some(id:ASC)
    )(implicit reader: ClientResponseReader[PageResourceArticleResource]): Future[PageResourceArticleResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    filterActiveOnly match {
      case Some(param) => queryParams += "filter_active_only" -> param.toString
      case _ => queryParams
    }
    filterCategory match {
      case Some(param) => queryParams += "filter_category" -> param.toString
      case _ => queryParams
    }
    filterTagset match {
      case Some(param) => queryParams += "filter_tagset" -> param.toString
      case _ => queryParams
    }
    filterTagIntersection match {
      case Some(param) => queryParams += "filter_tag_intersection" -> param.toString
      case _ => queryParams
    }
    filterTagExclusion match {
      case Some(param) => queryParams += "filter_tag_exclusion" -> param.toString
      case _ => queryParams
    }
    filterTitle match {
      case Some(param) => queryParams += "filter_title" -> param.toString
      case _ => queryParams
    }
    size match {
      case Some(param) => queryParams += "size" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateArticle(id: String,
    articleResource: Option[ArticleResource] = None
    )(implicit reader: ClientResponseReader[ArticleResource], writer: RequestWriter[ArticleResource]): Future[ArticleResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentArticlesApi->updateArticle")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(articleResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateArticleTemplate(id: String,
    articleTemplateResource: Option[TemplateResource] = None
    )(implicit reader: ClientResponseReader[TemplateResource], writer: RequestWriter[TemplateResource]): Future[TemplateResource] = {
    // create path and map variables
    val path = (addFmt("/content/articles/templates/{id}")
      replaceAll ("\\{" + "id" + "\\}",id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (id == null) throw new Exception("Missing required parameter 'id' when calling ContentArticlesApi->updateArticleTemplate")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(articleTemplateResource))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
