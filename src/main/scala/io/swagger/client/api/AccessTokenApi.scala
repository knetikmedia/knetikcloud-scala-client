/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.OAuth2Resource
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class AccessTokenApi(val defBasePath: String = "https://sandbox.knetikcloud.com",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Get access token
   * 
   * @param grantType Grant type 
   * @param clientId The id of the client 
   * @param clientSecret The secret key of the client.  Used only with a grant_type of client_credentials (optional)
   * @param username The username of the client.  Used only with a grant_type of password (optional)
   * @param password The password of the client.  Used only with a grant_type of password (optional)
   * @return OAuth2Resource
   */
  def getOAuthToken(grantType: String /* = client_credentials*/, clientId: String /* = knetik*/, clientSecret: Option[String] = None, username: Option[String] = None, password: Option[String] = None): Option[OAuth2Resource] = {
    // create path and map variables
    val path = "/oauth/token".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/x-www-form-urlencoded")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (grantType == null) throw new Exception("Missing required parameter 'grantType' when calling AccessTokenApi->getOAuthToken")

    if (clientId == null) throw new Exception("Missing required parameter 'clientId' when calling AccessTokenApi->getOAuthToken")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      mp.field("grant_type", grantType.toString, MediaType.MULTIPART_FORM_DATA_TYPE)
      mp.field("client_id", clientId.toString, MediaType.MULTIPART_FORM_DATA_TYPE)
      clientSecret.map(paramVal => mp.field("client_secret", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      username.map(paramVal => mp.field("username", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      password.map(paramVal => mp.field("password", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      postBody = mp
    } else {
      formParams += "grant_type" -> grantType.toString
      formParams += "client_id" -> clientId.toString
      clientSecret.map(paramVal => formParams += "client_secret" -> paramVal.toString)
      username.map(paramVal => formParams += "username" -> paramVal.toString)
      password.map(paramVal => formParams += "password" -> paramVal.toString)
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[OAuth2Resource]).asInstanceOf[OAuth2Resource])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
