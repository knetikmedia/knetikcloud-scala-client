/**
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.CountryTaxResource
import io.swagger.client.model.PageCountryTaxResource
import io.swagger.client.model.PageStateTaxResource
import io.swagger.client.model.StateTaxResource
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class TaxesApi(val defBasePath: String = "https://localhost:8080/",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Create a tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @param taxResource The tax object (optional)
   * @return void
   */
  def createTaxUsingPOST(countryCodeIso3: String, taxResource: Option[StateTaxResource] = None) = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->createTaxUsingPOST")

    

    var postBody: AnyRef = taxResource.map(paramVal => paramVal)

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Delete an existing tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @return void
   */
  def deleteTaxUsingDELETE(countryCodeIso3: String) = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->deleteTaxUsingDELETE")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Delete an existing tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @param stateCode The code of the state 
   * @return void
   */
  def deleteTaxUsingDELETE1(countryCodeIso3: String, stateCode: String) = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3)).replaceAll("\\{" + "state_code" + "\\}",apiInvoker.escape(stateCode))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->deleteTaxUsingDELETE1")

    if (stateCode == null) throw new Exception("Missing required parameter 'stateCode' when calling TaxesApi->deleteTaxUsingDELETE1")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List and search taxes across all countries
   * Get a list of taxes
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
   * @return PageStateTaxResource
   */
  def getAllTaxesUsingGET(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = 1*/): Option[PageStateTaxResource] = {
    // create path and map variables
    val path = "/tax/states".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    size.map(paramVal => queryParams += "size" -> paramVal.toString)
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    order.map(paramVal => queryParams += "order" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[PageStateTaxResource]).asInstanceOf[PageStateTaxResource])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a single tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @return CountryTaxResource
   */
  def getTaxUsingGET(countryCodeIso3: String): Option[CountryTaxResource] = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->getTaxUsingGET")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[CountryTaxResource]).asInstanceOf[CountryTaxResource])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a single tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @param stateCode The code of the state 
   * @return StateTaxResource
   */
  def getTaxUsingGET1(countryCodeIso3: String, stateCode: String): Option[StateTaxResource] = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3)).replaceAll("\\{" + "state_code" + "\\}",apiInvoker.escape(stateCode))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->getTaxUsingGET1")

    if (stateCode == null) throw new Exception("Missing required parameter 'stateCode' when calling TaxesApi->getTaxUsingGET1")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[StateTaxResource]).asInstanceOf[StateTaxResource])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List and search taxes
   * Get a list of taxes
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
   * @return PageCountryTaxResource
   */
  def getTaxesUsingGET(size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = 1*/): Option[PageCountryTaxResource] = {
    // create path and map variables
    val path = "/tax/countries".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    size.map(paramVal => queryParams += "size" -> paramVal.toString)
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    order.map(paramVal => queryParams += "order" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[PageCountryTaxResource]).asInstanceOf[PageCountryTaxResource])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List and search taxes within a country
   * Get a list of taxes
   * @param countryCodeIso3 The iso3 code of the country 
   * @param size The number of objects returned per page (optional, default to 25)
   * @param page The number of the page returned (optional, default to 1)
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
   * @return PageStateTaxResource
   */
  def getTaxesUsingGET1(countryCodeIso3: String, size: Option[Integer] /* = 25*/, page: Option[Integer] /* = 1*/, order: Option[String] /* = 1*/): Option[PageStateTaxResource] = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->getTaxesUsingGET1")

    size.map(paramVal => queryParams += "size" -> paramVal.toString)
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    order.map(paramVal => queryParams += "order" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[PageStateTaxResource]).asInstanceOf[PageStateTaxResource])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Create a tax
   * 
   * @param taxResource The tax object (optional)
   * @return void
   */
  def updateTaxUsingPOST(taxResource: Option[CountryTaxResource] = None) = {
    // create path and map variables
    val path = "/tax/countries".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    

    var postBody: AnyRef = taxResource.map(paramVal => paramVal)

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Create or update a tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @param taxResource The tax object (optional)
   * @return void
   */
  def updateTaxUsingPUT(countryCodeIso3: String, taxResource: Option[CountryTaxResource] = None) = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->updateTaxUsingPUT")

    

    var postBody: AnyRef = taxResource.map(paramVal => paramVal)

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Create or update a tax
   * 
   * @param countryCodeIso3 The iso3 code of the country 
   * @param stateCode The code of the state 
   * @param taxResource The tax object (optional)
   * @return void
   */
  def updateTaxUsingPUT1(countryCodeIso3: String, stateCode: String, taxResource: Option[StateTaxResource] = None) = {
    // create path and map variables
    val path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "country_code_iso3" + "\\}",apiInvoker.escape(countryCodeIso3)).replaceAll("\\{" + "state_code" + "\\}",apiInvoker.escape(stateCode))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (countryCodeIso3 == null) throw new Exception("Missing required parameter 'countryCodeIso3' when calling TaxesApi->updateTaxUsingPUT1")

    if (stateCode == null) throw new Exception("Missing required parameter 'stateCode' when calling TaxesApi->updateTaxUsingPUT1")

    

    var postBody: AnyRef = taxResource.map(paramVal => paramVal)

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
